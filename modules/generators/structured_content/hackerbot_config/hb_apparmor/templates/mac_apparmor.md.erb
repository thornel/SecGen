
## Mandatory Access Controls: Capabilities and AppArmor

Rule-based system-wide access controls can control what each application is authorised to do. The security system enforces exactly which files or resources are accessible to each process. They don't typically require applications to be launched into a sandbox, rules are applied to any applications that have policies.

## Capabilities: Coarse-grained rights

Some rule-based controls are quite coarsely grained. For example, Android grants permissions such as "Network", "SD Card", "Camera", and "GPS" access.

Another coarsely grained system is *Linux capabilities*, which break up root's special permissions so that some programs can be granted specific "capabilities" rather than run as root. Normally on Unix, there are two types of users: privileged (uid=0) and unprivileged (uid != 0). The root user (0) is allowed to do practically anything and bypasses all kernel permission checks. Capabilities divide these privileges. Which makes it possible to, for example, allow a program to have raw network access or to call chroot (CAP\_CHROOT), without granting it all of root's other privileges, such as the ability to access every file on the system.

See `man capabilities` for the full list of available capabilities.

One of the limitations of the traditional Unix approach to privilege is that programs that require special permissions, such as ping, need to run as root. In this case, it is so that ping can do raw network operations -- something normal users can't do. However, when ping runs as root (via setuid), then a programming mistake (vulnerability) in ping could possibly allow normal users root access.

Capabilities help to solve the problem. Instead of running the program setuid root, we can give it the capability to do what it needs without access to everything else that root is allowed to do.

==Ping your own system== (Ctrl-C to stop):

```bash
ping localhost
```

Now ==make a copy of ping== (using sudo so that the copy is also owned by root):

```bash
sudo cp /bin/ping /tmp/ping
```

As your normal user (not root), try pinging again:

```bash
/tmp/ping localhost
```

It won't work since it doesn't have the required permissions:

`
ping: socket: Operation not permitted
`

One way to enable ping to work, is to let it run as root, using setuid (this is how most Linux distros have worked with ping in the past).

==Add setuid permissions== to the copy:

```bash
sudo chmod u+s /tmp/ping
```

==Try pinging again== (it should work):

```bash
/tmp/ping localhost
```

A better solution is to use capabilities rather than setuid root.

==Remove setuid:==

```bash
sudo chmod u-s /tmp/ping
```

==Check the man page== of setcap:

```bash
man setcap
```

Now ==set ping to use the capability==, by attaching the capability to the file:

```bash
sudo setcap cap_net_raw=ep /tmp/ping
```

Check that the program now has the capability. ==Run:==

```bash
/sbin/getcap /tmp/ping
```

You should now be able to ==use the /tmp/ping program== as any user, and it will be able to ping as before:

```bash
/tmp/ping localhost
```

The advantage is that now the program cannot do all the other things root can do, so a vulnerability in ping wouldn't expose your entire system

==Log Book Question: What approach does your desktop VM use to run ping?==

==Log Book Question: Describe and demonstrate another example where capabilities can be used to remove the need for setuid.==

## AppArmor: Rule-based fine-grained controls

Another approach taken by some schemes is to simply specify a list of all the resources each application is authorised to access. This is the approach taken by AppArmor and TOMOYO, which are Linux Kernel security features.

First, ==check that AppArmor is installed and enabled== on your Linux system:

```bash
systemctl status apparmor

sudo aa-enabled
```

AppArmor takes a rule-based approach to specify which files (and other permissions) a *program* gets access to. View the profiles that have been loaded. ==Run:==

```bash
sudo aa-status
```

The profiles are stored in /etc/apparmor.d/

==View an example profile:==

```bash
less /etc/apparmor.d/bin.ping
```

Note that the profile has rules to enable networking (by allowing the program to use any matching capabilities it has been assigned, and permitting it to use networking):

```
capability net_raw,

capability setuid,

network inet raw,

network inet6 raw,

```

Some rules grant access to files. This permits the `/etc/modules.conf` file to be read:

```
/etc/modules.conf r,
```

And this permits the program to read "r", memory map "m", and execute the ping program itself:

```
/{,usr/}bin/ping mixr,
```

Note that when a process (running program) starts a new process (program on disk), there are a few options about how the new process can be confined. The option used here is Inherit, "ix", which means that the new process is confined by this same profile. This is generally the safest and easiest to understand. Other options include using its own separate profile or a child sub-profile.

There are also some time-saving *abstractions* included, which are collections of rules:

```
#include &lt;abstractions/base&gt;
```

==Have a look at a more complicated profile:==

```bash
less /etc/apparmor.d/usr.sbin.smbd
```

Creating your own AppArmor profile
----------------------------------

You will start by using AppArmor to confine a harmless text viewer to enable it to read \~/hello, but not allow it to read \~/mysecret.

==Make a copy of less:==

```bash
sudo cp /bin/less /tmp/less
```

==Check you can use this `/tmp/less` to access "mysecret" and "hello" files in your home directory.==

==Create a barebones profile== for less by running:

```bash
sudo aa-autodep /tmp/less
```

==Check that your profile is now in complain mode:==

```bash
sudo aa-status
```

==Set the new profile to enforcing:==

```bash
sudo aa-enforce /tmp/less
```

==Test that you can no longer open either of your files.==

```bash
/tmp/less hello

/tmp/less mysecret
```

==Even with root:==

```bash
sudo /tmp/less hello
```

==View your new profile:==

```bash
sudo less /etc/apparmor.d/tmp.less
```

==View the audit log==, which includes the AppArmor denials that have taken place:

```bash
sudo less /var/log/audit/audit.log
```

==Note that your profile is now in enforcing mode:==

```bash
sudo aa-status
```

==Change your profile into complain mode== so that the denials are logged but not enforced.

```bash
sudo aa-complain /tmp/less
```

AppArmor has a learning mode to make rule construction easier. During learning mode, AppArmor logs all the denials (either in enforcing more or complaining mode) then when you are ready it steps you through each of the things the program did, with the option to add to the profile rules.

==Run:==

```bash
sudo aa-genprof /tmp/less
```

==Leave that running and (in a separate console) run less to view some files.==

When you are finished, go back to your running aa-genprof and ==press "S"== to scan the audit log for rules.

The aa-genprof will ask you whether to add various rules to your profile. You should choose to accept all the access attempts that you deem appropriate (most of them, hopefully!). If you opened your mysecret file, you should not add that to the rules.

Note that you can "deny" access to a file, but you can also choose to "ignore" those files, because anything not explicitly granted by the AppArmor profile will be denied.

Also note that there is an option to have rules only grant permission when the user is the owner of the file, which is not always what you want.

==Change your profile into enforce mode so that the denials are enforced:==

```bash
sudo aa-enforce /tmp/less
```

==Update and test== to create a profile that enables /tmp/less to access hello, and any files in your Documents folder, while denying access to your mysecret file.

If you edit profiles directly, you can reload profiles with:

```bash
sudo service apparmor reload
```

==Log Book Question: What are the advantages and disadvantages of using a blacklist (deny) vs whitelist (ignore) approach to writing AppArmor rules?==
