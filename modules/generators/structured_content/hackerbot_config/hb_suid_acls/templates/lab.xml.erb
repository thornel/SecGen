<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $main_user = $first_account['username'].to_s
  $main_user_pass = $first_account['password'].to_s

  $second_account = JSON.parse(self.accounts[1])
  $second_user = $second_account['username'].to_s
  $second_password = $second_account['password'].to_s


  $server_ip = self.server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  REQUIRED_FLAGS = 1
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
  <get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
		<show_attack_numbers />

		<greeting>Hi there. Solve some challenges and I'll give you some flags.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last one for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last one. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Doing my thing...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>...</got_shell>
		<got_shell>....</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Access Controls: SUID</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>

<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>


	<attack>
    <% $rand_secret1 = "secret#{SecureRandom.hex(3)}" %>
    <% $secret_file = "/home/#{$main_user}/mysecret" %>
    <% $suid_program = "/home/#{$main_user}/access_my_secrets" %>
    <% $suid_program_path = "/home/#{$main_user}" %>

    <prompt>Add "<%= $rand_secret1 %>" to <%= $secret_file %> and make the file only available to the <%= $second_user %> user via a SUID execuable at <%= $suid_program %>.</prompt>

    <post_command>grep <%= $rand_secret1 %> <%= $secret_file %>; echo contents-$?-; cd <%= $suid_program_path %>; sudo -u <%= $second_user %> <%= $suid_program %> | grep <%= $rand_secret1 %> >/dev/null; echo suid-$?-; sudo -u <%= $second_user %> cat <%= $secret_file %> | grep <%= $rand_secret1 %> >/dev/null; echo direct-$?-</post_command>

    <condition>
			<output_matches>contents-[1-9]+</output_matches>
      <message>:( It looks like the file might not exist or not contain the message.</message>
		</condition>
    <condition>
			<output_matches>direct-0-</output_matches>
      <message>:( Other users can access the file directly, make sure it's only avaiable via the SUID program</message>
		</condition>
    <condition>
			<output_matches>suid-0-</output_matches>
      <message>:) Well done! <%= $flags.pop %></message>
      <trigger_next_attack />
		</condition>
		<else_condition>
      <message>:( Something was not right</message>
		</else_condition>

    <tutorial><%= ERB.new(File.read self.templates_path + 'setuid.md.erb').result(self.get_binding) %></tutorial>

	</attack>



	<attack>

		<prompt>There are two problem solving challenges on the server. Look at the home directories and the .c files. 1: Use the access_my_flag program to access the two flags (hint: think about how you can use hardlink trickery to access relative paths). 2: Look at the two shell programs and how you can combine them together to get at a flag. This is the end.</prompt>

		<condition>
			<output_matches>.*</output_matches>
			<message>:)</message>
			<trigger_next_attack />
		</condition>
    <condition>
			<output_matches>.*</output_matches>
			<message>:)</message>
			<trigger_next_attack />
		</condition>
		<else_condition>
			<message>:)</message>
		</else_condition>

	</attack>

<!-- TODO: add another attack where HB uses a hardlink attack against the SUID program - they have to fix the problem  -->

</hackerbot>
