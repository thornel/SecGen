The output contains instructions to log the attempt to Syslog (which is what pam\_warn.so does) and deny access (using pam\_deny.so) any attempt to authenticate (the lines starting with "auth"), request access to anything (account), change passwords (password), or starting a session (session).

Note that in the example above, pam\_warn.so returns "PAM\_IGNORE". Therefore the next module pam\_deny.so is started, which returns an error, and the authentication fails.


Note that there is likely no lockout for failed password attempts when using su to change user. Confirm this by running this command a few times:

```bash
su - <%= $main_user %>; su - <%= $main_user %>; su - <%= $main_user %>; su - <%= $main_user %>;
```

When prompted each time, enter an incorrect password.

Now, let's assume our aim is to add a 5 minute lockout time for when a user enters the wrong password 3 times in a row when using "su". Log-tally lockouts can be achieved using pam\_tally2.

View the man page for this PAM module:

```bash
man pam\_tally2
```

Edit /etc/pam.d/su-l, and insert this line as the first module (after the comment at the start of the file):

auth required pam\_tally2.so deny=3 unlock\_time=300

Verify that this change has been successful by running the following command again:

```bash
su - <%= $main_user %>; su - <%= $main_user %>; su - <%= $main_user %>; su - <%= $main_user %>;
```

Enter the wrong password the first 3 times, and then the correct password on the 4th attempt.

==Create a new user named "dropbear".==

Finally, apply what you have learned to **configure PAM to only allow:**

-   **The user "dropbear" to login between 9am and 5pm**

-   **And only on a Tuesday**

For testing purposes add another rule that allows a user to log in only 10 minutes from the current time

> Hint: use pam\_time.so and edit /etc/security/time.conf (and read the documentation in the configuration file to figure out how to set the correct limits)
>
> Another hint: try the "account" type.

Configure a cron job to force the user to logout at the end of their allowed time

> Hint: as root, "crontab -e" and add a job to run at 5pm on Tuesday killing all of their processes
>
> For example, to disconnect dropbear on Wednesday at 4pm, add this line to cron (run "crontab -e", then press "i" to add):
>
> 00 16 \* root \* wed skill-KILL-u dropbear
>
> Try to figure out how to also send a warning to the user 10 minutes before they are kicked off (Hint: add another cron job, you could send a message via "wall", etc)
