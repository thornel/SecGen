<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $second_account = JSON.parse(self.accounts[1])
  $second_user = $second_account['username'].to_s
  $second_password = $second_account['password'].to_s

  $main_user = $first_account['username'].to_s
  $main_user_pass = $first_account['password'].to_s

  $server_ip = self.server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  REQUIRED_FLAGS = 2
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
  <get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
		<show_attack_numbers />

		<greeting>Hi there. Today I'm your boss of sorts. I need you to config the security of your desktop. Help out and I'll give you some flags.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>That was the last one for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last one. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Doing my thing...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>...</got_shell>
		<got_shell>....</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Authentication</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>

<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>


	<attack>
		<prompt>Configure your desktop so that passwords are required to be at least 10 characters long.</prompt>
    <post_command>echo -e 'shorter8\nshorter8' | passwd <%= $second_user %> ; echo -$?-</post_command>

    <condition>
			<output_matches>password is shorter than 10</output_matches>
      <message>:) Well done! <%= $flags.pop %></message>
      <trigger_next_attack />
		</condition>
    <condition>
			<output_matches>updated successfully</output_matches>
      <message>:( I set a short password. Did you forgot to add a pam_cracklib rule?</message>
		</condition>
		<else_condition>
      <message>:( Something was not right</message>
		</else_condition>

	</attack>


	<attack>
		<prompt>Configure your desktop so that passwords are required to include numbers (and this should also apply for root).</prompt>
    <post_command>echo -e 'tiaspbiqetr\ntiaspbiqetr' | passwd <%= $second_user %> ; echo "p1-$?-"; echo -e 'tiaspbiqe2r\ntiaspbiqe2r' | passwd <%= $second_user %> ; echo "p2-$?-"; </post_command>

		<condition>
			<output_matches>p1-0-</output_matches>
      <message>:( I set a password without including numbers. It looks like you forgot to add the rule, or enforce_for_root?</message>
		</condition>
    <condition>
			<output_matches>p2-0-</output_matches>
      <message>:) Well done! <%= $flags.pop %></message>
      <trigger_next_attack />
		</condition>
		<else_condition>
      <message>:( I couldn't set a password without numbers... OR WITH THEM?</message>
		</else_condition>

	</attack>


	<!-- <attack>
		<prompt>Configure your desktop so that failed login attempts create a 5 min lockout after 4 failed attempts to login. Trigger the <%= $second_user %> by attempting logins.</prompt>
    <post_command>echo "echo wrongpass | script -c 'su <%= $second_user %>'; echo wrongpass | script -c 'su <%= $second_user %>'; echo wrongpass | script -c 'su <%= $second_user %>'; echo wrongpass | script -c 'su <%= $second_user %>'; echo wrongpass | script -c 'su <%= $second_user %>'" | script -c 'su <%= $second_user %>' </post_command>

    <condition>
			<output_matches>locked</output_matches>
      <message>:) Well done! <%= $flags.pop %></message>
      <trigger_next_attack />
		</condition>
    <condition>
			<output_matches>.*</output_matches>
      <message>:( Didn't lock out after failed attempts. Hint: Log-tally lockouts can be achieved using pam_tally2</message>
		</condition>
		<else_condition>
      <message>:( Nope</message>
		</else_condition>

	</attack> -->


</hackerbot>
