### Protecting integrity with file permissions
#### Getting to know file permissions

File permissions enable users to control the access that other users have to their files.

We will cover the topic in depth elsewhere. This just provides an introduction to Unix file permissions.

Open a terminal console (such as "Konsole" from KDEMenu / Applications / System / Konsole).

Start by creating a file with some content.

==Run:==

```bash
cat > /home/<%= $main_user %>/example
```
> (Type some content, then press Ctrl-D to finish and return to the
prompt.)
> The output is sent to the file /home/<%= $main_user %>/example
>
> Note that in bash **you can type *~* as shorthand for your home directory** ("/home/*<%= $main_user %>*"), but for the sake of clarity these instructions list the entire name.

You can read the content:

```bash
cat /home/<%= $main_user %>/example
```

Or replace the content:

```bash
cat > /home/<%= $main_user %>/example
```
> (Type some content, then press Ctrl-D to finish and return to the
prompt.)

You can view the file permissions with:

```bash
ls -la /home/<%= $main_user %>/example
```
`` -rw-r--r-- 1 user user 20 Feb 7 17:38 /home/<%= $main_user %>/example ``

This shows that the file is owned by *user*, and that the user has read-write access ("rw-"), others on the system have read access ("r--").

By default new files can only be edited by the owner of the file (more on file permissions and umask another time). However, by default other users of the system can likely *read* your files.

You can remove the ability of *anyone* changing the content. ==Run:==

```bash
chmod -w /home/<%= $main_user %>/example
```
> -w means "remove write access (for everyone)"

Try changing the content. ==Run:==

```bash
cat > /home/<%= $main_user %>/example
```

You can't.

You can remove the ability of **everyone else** changing the content. ==Run:==

```bash
chmod u+w,o-rw /home/<%= $main_user %>/example
```
> u+w: user who owns the file, add write access
> o-rw: others, remove read and write access


You can view the file permissions with:

```bash
ls -la /home/<%= $main_user %>/example
```
`` -rw-------- 1 user user 20 Feb 7 17:38 /home/<%= $main_user %>/example ``

Note that **the root user can access any files**, regardless of file permissions.

```bash
chmod -w /home/<%= $main_user %>/example
sudo cat /home/<%= $main_user %>/example
```
> Enter your password, and note that as root you can access the file regardless of permissions.

"sudo" runs a command as another user (typically root). On Unix the root user (or any user with an uid of 0) is a superuser (i.e. administator) with extra privileges.

Exploring Unix file permissions further is outside the scope of this lab, but will be covered elsewhere.
