### Detecting changes to resources using hashes and file integrity checkers

Another technique for detecting modifications to files is to use hashes of files in their known good state. Rather than storing and comparing complete copies, a one way hash function can be used to produce a fixed length hash (or 'digest'), which can be used for later comparisons.

Hashes have security properties that enable this use:

-   Each hash is unique to the input
-   It is extremely difficult (practically impossible) to find another input that produces the same hash output
-   Any change to the input (no matter how minor) changes the output hash dramatically

We can store a hash and later recompute the hash, to determine whether the file has changed (if the hash is different), or it is exactly the same (if the hash is the same). If you have studied digital forensics, many of these concepts will be familiar to you, since hashes are also commonly used for verifying the integrity of digital evidence.

==Generate an MD5 hash== of your backup password file, which you copied previously:

```bash
md5sum /home/<%= $main_user %>/backups/passwd
```

Now ==calculate a hash== of your current passwd file:

```bash
md5sum /etc/passwd
```

If the generated hashes are different, you know the files do not have **exactly the same content**.

Note that using hashes, there is no need to have the backup on-hand in order to check the integrity of files, you can just compare a newly generated hash to a previous one.

==Repeat the above two commands using shasum== rather than md5sum.

SHA1, SHA2, and SHA3 are considered to be more secure than the 'cryptographically broken' MD5 algorithm. Although MD5 is still in use today, it is safer to use a stronger hash algorithm, since MD5 is not collision-resistant, meaning it is possible to find multiple files that result in the same hash. SHA1 is considered partially broken, so a new algorithm such as SHA2, or the newest SHA3 are currently good options. There are a number of related commands for generating hashes, named md5sum, shasum, sha224sum, sha256sum, and so on. These commands (as well as those in the next section) are readily available on most Unix systems, and are also available for Windows.

#### File integrity checkers

A file integrity checker is a program that compares files to previously generated hashes. A number of these kinds of tools exist, and these can be considered a form of host-based intrusion detection system (HIDS), particularly if the checking happens automatically. One of the most well known integrity checkers is Tripwire, which was previously released open source; although, new versions are closed source and maintained by Tripwire, Inc, with a more holistic enterprise ICT change management focus. There are other tools similar to Tripwire, such as AIDE (Advanced Intrusion Detection Environment), and OSSEC (Open Source Host-based Intrusion Detection System).

The above md5sum, shasum (and so on) programs can also be used to check a list of file hashes.

==Run the following== to generate a file containing hashes of files we can later check against:

```bash
mkdir /home/<%= $main_user %>/hashes/

shasum <%= $example_file %> >> /home/<%= $main_user %>/hashes/hash.sha
shasum /etc/passwd >> /home/<%= $main_user %>/hashes/hash.sha
sudo shasum /etc/shadow >> /home/<%= $main_user %>/hashes/hash.sha
shasum /bin/bash >> /home/<%= $main_user %>/hashes/hash.sha
shasum /bin/ls >> /home/<%= $main_user %>/hashes/hash.sha
```

==Look at the contents== of our new hashes file:

```bash
less /home/<%= $main_user %>/hashes/hash.sha
```
> Press q to quit when done

Now use your new hash list to ==check that nothing has changed== since we generated the hashes:

```bash
shasum -c /home/<%= $main_user %>/hashes/hash.sha
```

==Lab book question: Why does shasum fail to check the integrity of the shadow file?==

==Make a change== to the end of <%= $example_file %>:

```bash
echo "hello" >> <%= $example_file %>
```

Check whether anything has changed since we generated hashes:

```bash
shasum -c /home/<%= $main_user %>/hashes/hash.sha
```

You should see a nice explanation of the files that have changed since generating the hashes.

#### Scripted integrity checking

The above can also be accomplished via a simple script (in this case a Ruby script):

```ruby
#!/usr/bin/ruby
# Copyleft Z. Cliffe Schreuders
# Licenced under the terms of the GPLv3

require 'digest'

hashes = {
  "/bin/ls" => "075e188324c2f4e54359128371a01e4d5e3b7be08382e4433bd53523f8bf6217",
  "/etc/passwd" => "8a9d9fa67078d83274fae27e4ffd3d100db51501dfdef42dde7b190c91a899ef",
  "/bin/bash" => "059fce560704769f9ee72e095e85c77cbcd528dc21cc51d9255cfe46856b5f02"
}

hashes.each { |filepath,hash|
  calculated_hash = Digest::SHA256.hexdigest File.read filepath
  puts "#{filepath}: #{calculated_hash}"
  if calculated_hash == hash
    puts "OK: file unmodified"
  else
    puts "FILE CHANGED: expected #{hash}"
  end
}
```

This script iterates over a list of file paths with SHA256 hashes (stored in an associative array), and calculates the hash for each one to check whether the files are still the same.

==Save the script as checker.rb==
> Tip: you may wish to use the default KDE GUI text editor Kate. You should be able to copy the script and paste it into Kate to save it as checker.rb.
>
> Alternatively you can type:
> "cat > checker.rb"
> Paste with Ctrl-Shift-V.
> Then, Ctrl-D, to end the input.

Then ==run the script== with:

```bash
ruby checker.rb
```

==Lab book question: Are the files reported as unmodified, or have they changed? Why might they be different to when I wrote the script?==
