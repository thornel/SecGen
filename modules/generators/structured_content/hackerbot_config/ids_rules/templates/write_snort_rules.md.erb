## Networking concepts (potentially revision)
### The Internet protocol suite
Modern network traffic (such as the Internet) typically uses the Internet protocol suite set of communications protocols.

The Internet protocol suite has four abstraction layers:

> * "**The application layer** is the scope within which applications create user data and communicate this data to other applications on another or the same host. The applications, or processes, make use of the services provided by the underlying, lower layers, especially the Transport Layer which provides reliable or unreliable pipes to other processes. The communications partners are characterized by the application architecture, such as the client-server model and peer-to-peer networking. This is the layer in which all higher level protocols, such as SMTP, FTP, SSH, HTTP, operate. Processes are addressed via ports which essentially represent services.
> * **The transport layer** performs host-to-host communications on either the same or different hosts and on either the local network or remote networks separated by routers. It provides a channel for the communication needs of applications. UDP is the basic transport layer protocol, providing an unreliable datagram service. The Transmission Control Protocol provides flow-control, connection establishment, and reliable transmission of data.
> * **The internet layer** has the task of exchanging datagrams across network boundaries. It provides a uniform networking interface that hides the actual topology (layout) of the underlying network connections. It is therefore also referred to as the layer that establishes internetworking, indeed, it defines and establishes the Internet. This layer defines the addressing and routing structures used for the TCP/IP protocol suite. The primary protocol in this scope is the Internet Protocol, which defines IP addresses. Its function in routing is to transport datagrams to the next IP router that has the connectivity to a network closer to the final data destination.
> * **The link layer** defines the networking methods within the scope of the local network link on which hosts communicate without intervening routers. This layer includes the protocols used to describe the local network topology and the interfaces needed to effect transmission of Internet layer datagrams to next-neighbor hosts."
(https://en.wikipedia.org/wiki/Internet_protocol_suite#Abstraction_layers)

### Common services and (application layer) protocols
In order to make sense of network traffic, it is important to be aware of common protocols and port numbers.

| TCP/UDP | Port(s) | Service |
|---------|---------|---------|
| tcp     | 20/21   | File Transfer Protocol (FTP) (RFC 959) |
| tcp     | 22      | Secure Shell (SSH) (RFC 4250-4256) |
| tcp     | 23      | Telnet (RFC 854) |
| tcp     | 25      | Simple Mail Transfer Protocol (SMTP) (RFC 5321) |
| tcp/udp | 53      | Domain Name System (DNS) (RFC 1034-1035) |
| udp     | 69      | Trivial File Transfer Protocol (TFTP) (RFC 1350) |
| tcp     | 80      | Hypertext Transfer Protocol (HTTP) (RFC 2616) |
| tcp     | 110     | Post Office Protocol (POP) version 3 (RFC 1939) |
| tcp/udp | 137/138/139 | NetBIOS (RFC 1001-1002) |
| tcp     | 143     | Internet Message Access Protocol (IMAP) (RFC 3501) |
| tcp/udp | 161/162 | Simple Network Management Protocol (SNMP) (RFC 1901-1908, 3411-3418) |
| tcp/udp | 389     | Lightweight Directory Access Protocol (LDAP) (RFC 4510) |
| tcp     | 443     | Hypertext Transfer Protocol over SSL/TLS (HTTPS) (RFC 2818) |
| tcp/udp | 636     | Lightweight Directory Access Protocol over TLS/SSL (LDAPS) (RFC 4513) |
| tcp     | 989/990 | FTP over TLS/SSL (RFC 4217) |
| tcp     | 6660-6669 | Internet Relay Chat (IRC) |

Please ensure you understand what each of these ports are used for. If you are not aware of what these protocols are, do some online reading.
> This may be a useful overview resource: http://www.pearsonitcertification.com/articles/article.aspx?p=1868080

Keep in mind that in recent years more and more network based functionality is moving to be hosted via Web protocols (HTTP and HTTPS).

### Using Wireshark

Note that in Wireshark you can view individual packets, including IP and TCP headers. Wireshark also has support for viewing TCP streams, so that you can view the traffic at the application layer as it is sent between the two computers (such as, client and server). (Simply right-click on a TCP entry and select *Follow > TCP Stream*.)

**On the ids_snoop VM:**

==Start Wireshark:==

```bash
kdesudo wireshark
```
> For this exercise you can ignore the warnings about running Wireshark as root, or read online to learn to use setcap to grant Wireshark more specific privileges.

Start capturing, listening to the interface with IP address <%= $ids_snoop_ip %>.
> If you are not sure, list the interfaces with `ifconfig` or `ip a s`

**On the desktop VM:**

While Wireshark is listening, ==access a web page from Firefox, browse to [*http://<%= $web_server_ip %>*](http://<%= $web_server_ip %>)== (In a new tab.)

**On the ids_snoop VM:**

Note that Wireshark uses colouring to make it easier to view traffic at a glance. ==View the colouring rules== via *View > Coloring Rules*.

In Wireshark ==use display filters== to narrow down the packets displayed. At the top of the Wireshark window, enter `tcp.port == 80`, and press Enter.

Right click the Web traffic, and select *Follow TCP Stream*.

> Note that the website request starts with the client sending "GET /"...

Note that you can also view the unzipped version of the content in Wireshark. In the view below the list of packets, ==expand the "Line-based text data: text/html" heading==

==LogBook Question: What is the difference between these views?==

Also experiment with using Wireshark display filters of `http` and `irc`.

## Writing your own Snort rules

Snort is primarily designed as a signature-based IDS. Snort monitors the network for matches to rules that indicate activity that should trigger an alert. You have now seen Snort detect a few types of activity. Next you will apply more complicated rules, and create your own.

You may find external reference guides to writing Snort rules helpful. See the resources section below, and Google may come in handy (from outside the VMs).

In general, rules are defined on one line (although, they can break over lines by using `\`), and take the form of:

**header** (**body**)

where header = "**action** (such as *log* or *alert*) **protocol** (*ip*,*tcp*,*udp*,*icmp*,*any*) **source_IP** **source_port** **direction** (-&gt;,&lt;&gt;) **destination_IP** **destination_port**"

> for example: `alert tcp any any -> any any` to make an alert for *any* TCP traffic, or `alert tcp any any -> <%= $web_server_ip %> 80` to make an alert for connections to unencrypted Web on the web_server VM's IP address

and body = "**option; option: "parameter"; ...**"

The most common options are:

> `msg: "message to display"`

and, to search the packet's content:

> `content: "some text to search for"`

To set the type of alert:

> `classtype:misc-attack`
>
> (where *misc-attack* is defined in `/etc/snort/classification.config`)

To give a unique identifier and revision version number:

> `sid:1000001; rev:1`

So for example the body could be:

> `msg: "Website access"; content: "GET"; sid:1000001; rev:1;`

<% $random_string = SecureRandom.hex(3) %>

And bringing all this together a Snort rule could read:
> `alert tcp any any -> <%= $web_server_ip %> 80 (msg: "Website access <%= $random_string %>"; content: "GET /"; sid:1000001; rev:1;)`

**On the ids_snoop VM:**

==Add this rule== to /etc/snort/rules/local.rules:

```bash
alert tcp any any -> <%= $web_server_ip %> 80 (msg: "Website access  <%= $random_string %>"; content: "GET /"; sid:1000001; rev:1;)
```

> Run `vi /etc/snort/rules/local.rules` Remember press 'i' to enter insert mode, make your changes, press Esc, then type ':wq' to write your changes and quit vi.

==Restart snort==:

```bash
sudo service snort restart
```

==Test the new rule...==

**On the desktop VM:**

While Wireshark is listening, ==access a web page from Firefox == browse to ==[*http://<%= $web_server_ip %>*](http://<%= $web_server_ip %>)== (In a new tab.)

**On the ids_snoop VM:**
==View the Snort alert file, to confirm your new rule generated an alert==

```bash
sudo tail /var/log/snort/alert
```

> The output should include the alert, with <%= $random_string %>. Note that Hackerbot will instruct you to include random strings such as this, in the alerts.
> In this case, the website may have resulted in a few HTTP connections, therefore triggering the rule a few times.
> If you do not see the alert, try creating a rule that triggers on all IP traffic, to confirm Snort is working correctly.

To view the alerts in real-time you can run this command in a console tab:
```bash
sudo tail -f /var/log/snort/alert
```
> -f outputs appended data as the file grows

==LabBook Question: Browse the existing rules in `/etc/snort/rules` and describe how one of the existing rules works.==

Tips:
* **Don't forget to reload Snort each time you change your rules.**
* Use unique sid values for each rule.
