<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $second_account = JSON.parse(self.accounts[1])

  $files = []
  $log_files = []
  if $second_account.key?("leaked_filenames") &&  $second_account['leaked_filenames'].size > 0
    $files = $second_account['leaked_filenames']
    $log_files = $second_account['leaked_filenames'].grep(/log/)
  end

  if $files.empty?
    $files = ['myfile', 'afile', 'filee', 'thefile']
  end
  if $log_files.empty?
    $log_files = ['log', 'thelog', 'logs', 'frogonalog']
  end

  $main_user = $first_account['username'].to_s
  $second_user = $second_account['username'].to_s
  $example_file = "/home/#{$second_user}/#{$files.sample}"
  $example_dir = "/home/#{$second_user}/personal_secrets/"

  $server_ip = self.server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  REQUIRED_FLAGS = 10
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>

	<messages>
    <show_attack_numbers />

		<greeting>Hey, today I'm your boss of sorts... Work with me and I'll pay you in flags :) These tasks do require the steps to be completed in order.</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that job.</goto>
		<last_attack>That was the last one for now. You can rest easy, until next time... (End.)</last_attack>
		<last_attack>That was the last one. Game over?</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Ok. Gaining shell access, and running post command...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>I am in to your system.</got_shell>
		<got_shell>I have shell.</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>Backing Up and Recovering from Disaster: SSH/SCP, Deltas, and Rsync</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'resources.md.erb' %>

<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>

	<attack>
<% $file = SecureRandom.hex(2) -%>
    <!--shell on the backup server-->
		<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<prompt>Use scp to copy the desktop /bin/ directory to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-bin-backup-<%= $file %>/, which should then include the backed up bin/ directory.</prompt>

		<post_command>ls /home/<%= $main_user %>/remote-bin-backup-<%= $file %>/bin/ls /home/<%= $main_user %>/remote-bin-backup-<%= $file %>/bin/mkdir > /dev/null; echo $?</post_command>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( You didn't copy to the remote /home/<%= $main_user %>/remote-bin-backup-<%= $file %>/bin/... Remember that the trailing / changes whether you are copying directories or their contents...</message>
		</condition>
		<condition>
			<output_matches>0</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'cp_ssh.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
    <!--shell on the backup server-->
		<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<!-- topic: Rsync-->
		<prompt>It's your job to set up remote backups for <%= $second_user %> (a user on your system). Use rsync to create a full (epoch) remote backup of /home/<%= $second_user %> from your desktop system to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-rsync-full-backup/<%= $second_user %>.</prompt>

		<post_command>ls /home/<%= $main_user %>/remote-rsync-full-backup/<%= $second_user %>/<%= $files.sample %> > /dev/null; echo $?</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>:) Well done! <%= $flags.pop %></message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>No such file or directory</output_matches>
			<message>:( You didn't copy to remote ssh /home/<%= $main_user %>/remote-rsync-full-backup/<%= $second_user %>/ Remember that the trailing / changes whether you are copying directories or their contents...</message>
		</condition>
		<else_condition>
			<message>:( Doesn't look like you have backed up all of <%= $second_user %>'s files to /home/<%= $main_user %>/remote-rsync-backup/<%= $second_user %>. Try SSHing to the server and look at what you have backed up there.</message>
		</else_condition>

		<tutorial><%= ERB.new(File.read self.templates_path + 'rsync.md.erb').result(self.get_binding) %></tutorial>
	</attack>

	<attack>
<% $first_notes = SecureRandom.hex(2) -%>
<% $hidden_flag = $flags.pop -%>
    <!--shell on the desktop-->
		<!-- topic: Rsync-->
		<prompt>The <%= $second_user %> user is about to create some files...</prompt>

		<post_command>sudo -u <%= $second_user %> bash -c 'echo "Note to self: drink more water <%= $first_notes %>" > /home/<%= $second_user %>/notes; echo "Beep boop beep" > /home/<%= $second_user %>/logs/log2; echo <%= $hidden_flag %> > /home/<%= $second_user %>/personal_secrets/flag; echo $?'</post_command>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( Oh no. Access errors. <%= $second_user %> failed to write the files... The user needs to be able to write to their files!</message>
		</condition>
		<condition>
			<output_matches>0</output_matches>
			<message>Ok, good... (Hint: Keep an eye out for a flag...)</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

<!--TODO: needs testing: fixed $files.sample?-->
	<attack>
    <!--shell on the backup server-->
		<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<!-- topic: Rsync differential-->
		<prompt>Create a differential backup of <%= $second_user %>'s desktop files to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-rsync-differential1/.</prompt>

		<!--grep retval=0 when match is found, 1/2 otherwise-->

		<post_command>grep '<%= $hidden_flag %>' /home/<%= $main_user %>/remote-rsync-differential1/<%= $second_user %>/personal_secrets/flag > /dev/null; status1=$?; ls /home/<%= $main_user %>/remote-rsync-differential1/<%= $second_user %>/<%= $files.sample %> > /dev/null; status2=$?; echo $status1$status2</post_command>
		<condition>
			<output_matches>0[1-9]</output_matches>
			<message>:) Well done! <%= $flags.pop %> </message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>[1-9][1-9]</output_matches>
			<message>:( You didn't backup to the specified remote directory.</message>
		</condition>
		<condition>
			<output_matches>00</output_matches>
			<message>:( You backed up to the correct location, but it wasn't an differential backup... You probably need to ssh in and delete that last backup and try again.</message>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

	<attack>
<% $rand_diff2 = SecureRandom.hex(2) -%>
    <!--shell on the desktop-->
		<!-- topic: Rsync differential-->
		<prompt>The <%= $second_user %> user is about to create some more files...</prompt>

		<post_command>sudo -u <%= $second_user %> bash -c 'echo "Dont forget the milk" >> /home/<%= $second_user %>/notes; echo "Beep boop beep" >> /home/<%= $second_user %>/logs/log2; echo <%= $rand_diff2 %> > /home/<%= $second_user %>/personal_secrets/really_not_a_flag; echo $?'</post_command>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( Oh no. Access errors. <%= $second_user %> failed to write the files... The user needs to be able to write to their files!</message>
		</condition>
		<condition>
			<output_matches>0</output_matches>
			<message>Ok, good... No flag this time, carry on...</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

	<attack>
    <!--shell on the backup server-->
		<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<!-- topic: Rsync differential-->
		<prompt>Create another differential backup of <%= $second_user %>'s desktop files to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-rsync-differential2/.</prompt>

    <!--check for the first set of changes (status1), the original files (shouldn't be there)(status2), then the new files(status3)-->
		<post_command>grep '<%= $hidden_flag %>' /home/<%= $main_user %>/remote-rsync-differential2/<%= $second_user %>/personal_secrets/flag > /dev/null; status1=$?; ls /home/<%= $main_user %>/remote-rsync-differential2/<%= $second_user %>/<%= $files.sample %> > /dev/null; status2=$?; grep <%= $rand_diff2 %> /home/<%= $main_user %>/remote-rsync-differential2/<%= $second_user %>/personal_secrets/really_not_a_flag > /dev/null; status3=$?; echo $status1$status2$status3</post_command>
		<condition>
			<output_matches>0[1-9]0</output_matches>
			<message>:) Well done! <%= $flags.pop %> </message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>[1-9][1-9][1-9]</output_matches>
			<message>:( You didn't backup to the specified remote directory.</message>
		</condition>
		<condition>
			<output_matches>[1-9][1-9]0</output_matches>
			<message>:( Your differential backup should also include the first set of changes (all changes since the full backup).</message>
		</condition>
		<condition>
			<output_matches>000</output_matches>
			<message>:( You backed up to the correct location, but it wasn't a differential backup... You probably need to ssh in and delete that last backup and try again.</message>
		</condition>
		<else_condition>
			<message>:( Something went wrong... Your backup should include all the changes since the full backup (including the first set of changes), but not the original files.</message>
		</else_condition>
	</attack>

	<attack>
<% $rand2 = SecureRandom.hex(2) -%>
    <!--shell on the desktop-->
		<!-- topic: Rsync-->
		<prompt>The <%= $second_user %> user is about to create even more files...</prompt>

		<post_command>sudo -u <%= $second_user %> bash -c 'echo "Buy eggs <%= $rand2 %>" > /home/<%= $second_user %>/notes; echo "Beep boop beep beep" >> /home/<%= $second_user %>/logs/log2; echo <%= $rand2 %> > /home/<%= $second_user %>/personal_secrets/<%= $rand2 %>; echo $?'</post_command>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( Oh no. Access errors. <%= $second_user %> failed to write the files... The user needs to be able to write to their files!</message>
		</condition>
		<condition>
			<output_matches>0</output_matches>
			<message>Ok, good... No flag this time, carry on...</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

	<attack>
    <!--shell on the backup server-->
		<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<!-- topic: Rsync incremental-->
		<prompt>Create an incremental backup of <%= $second_user %>'s desktop files to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-rsync-incremental1/. Base it on the epoch and also differential2.</prompt>

    <!--check for the first set of changes (shouldn't be there)(status1), the original files (shouldn't be there)(status2), then files1(shouldn't be there)(status3), then the new files(should be there)(status4)-->
		<post_command>grep '<%= $hidden_flag %>' /home/<%= $main_user %>/remote-rsync-incremental1/<%= $second_user %>/personal_secrets/flag > /dev/null; status1=$?; ls /home/<%= $main_user %>/remote-rsync-incremental1/<%= $second_user %>/<%= $files.sample %> > /dev/null; status2=$?; grep <%= $rand_diff2 %> /home/<%= $main_user %>/remote-rsync-incremental1/<%= $second_user %>/personal_secrets/really_not_a_flag > /dev/null; status3=$?; grep <%= $rand2 %> /home/<%= $main_user %>/remote-rsync-incremental1/<%= $second_user %>/personal_secrets/<%= $rand2 %> > /dev/null; status4=$?; echo $status1$status2$status3$status4</post_command>
		<condition>
			<output_matches>[1-9][1-9][1-9]0</output_matches>
			<message>:) Well done! <%= $flags.pop %> </message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>[1-9][1-9][1-9][1-9]</output_matches>
			<message>:( You didn't backup to the specified remote directory.</message>
		</condition>
		<condition>
			<output_matches>0[1-9]?{2}</output_matches>
			<message>:( You backed up to the correct location, but it wasn't an incremental backup... You probably need to ssh in and delete that last backup and try again.</message>
		</condition>
		<else_condition>
			<message>:( Something went wrong... Your backup should include just the changes since the last backup.</message>
		</else_condition>
	</attack>

	<attack>
<% $rand3 = SecureRandom.hex(2) -%>
    <!--shell on the desktop-->
		<!-- topic: Rsync-->
		<prompt>Again, the <%= $second_user %> user is about to create even more files...</prompt>

		<post_command>sudo -u <%= $second_user %> bash -c 'echo "Buy batteries <%= $rand3 %>" > /home/<%= $second_user %>/notes; echo "Beep boop beep beep" >> /home/<%= $second_user %>/logs/log2; echo <%= $rand3 %> > /home/<%= $second_user %>/personal_secrets/nothing_much; echo $?'</post_command>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( Oh no. Access errors. <%= $second_user %> failed to write the files... The user needs to be able to write to their files!</message>
		</condition>
		<condition>
			<output_matches>0</output_matches>
			<message>Ok, good... No flag this time, carry on...</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

	<attack>
    <!--shell on the backup server-->
		<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $server_ip %> /bin/bash</get_shell>

		<!-- topic: Rsync incremental-->
		<prompt>Create another incremental backup of <%= $second_user %>'s desktop files to the backup_server: <%= $server_ip %>:/home/<%= $main_user %>/remote-rsync-incremental2/.</prompt>

    <!--check for the first set of changes (shouldn't be there)(status1), the original files (shouldn't be there)(status2), then diff1(shouldn't be there)(status3), then the diff2(shouldn't be there)(status4), then inf1 (shouldn't be there), inf2 (should be there)-->
		<post_command>grep '<%= $hidden_flag %>' /home/<%= $main_user %>/remote-rsync-incremental2/<%= $second_user %>/personal_secrets/flag > /dev/null; status1=$?; ls /home/<%= $main_user %>/remote-rsync-incremental2/<%= $second_user %>/<%= $files.sample %> > /dev/null; status2=$?; grep <%= $rand_diff2 %> /home/<%= $main_user %>/remote-rsync-incremental2/<%= $second_user %>/personal_secrets/really_not_a_flag > /dev/null; status3=$?; grep <%= $rand2 %> /home/<%= $main_user %>/remote-rsync-incremental2/<%= $second_user %>/personal_secrets/<%= $rand2 %> > /dev/null; status4=$?; grep <%= $rand3 %> /home/<%= $main_user %>/remote-rsync-incremental2/<%= $second_user %>/personal_secrets/nothing_much > /dev/null; status5=$?; echo $status1$status2$status3$status4$status5</post_command>
		<condition>
			<output_matches>[1-9][1-9][1-9][1-9]0</output_matches>
			<message>:) Well done! <%= $flags.pop %> </message>
			<trigger_quiz />
		</condition>
		<condition>
			<output_matches>[1-9][1-9][1-9][1-9][1-9]</output_matches>
			<message>:( You didn't backup to the specified remote directory.</message>
		</condition>
		<condition>
			<output_matches>0[1-9]?{2}</output_matches>
			<message>:( You backed up to the correct location, but it wasn't an incremental backup... You probably need to ssh in and delete that last backup and try again.</message>
		</condition>
		<else_condition>
			<message>:( Something went wrong... Your backup should include just the changes since the last backup.</message>
		</else_condition>
		<quiz>
			<question>Access the backups via SSH. What's the contents of <%= $second_user %>/personal_secrets/nothing_much?</question>
			<answer>^<%= $rand3 %>$</answer>
			<correct_answer_response>:) <%= $flags.pop %></correct_answer_response>
			<trigger_next_attack />
		</quiz>
	</attack>

	<attack>
    <!--shell on the desktop-->
		<!-- topic: Rsync-->
		<prompt>I am going to attack you now!</prompt>

		<post_command>rm -r /home/<%= $second_user %>/*; echo $?</post_command>
		<condition>
			<output_matches>Permission denied|Operation not permitted|Read-only</output_matches>
			<message>:( Oh no. Access errors. <%= $second_user %>. You need to let this happen!</message>
		</condition>
		<condition>
			<output_matches>0</output_matches>
			<message>I just deleted all <%= $second_user %>'s files! They don't call me Hackerbot for nothin'!</message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>


	<attack>
    <!--shell on the desktop server-->

		<!-- topic: Rsync incremental-->
		<prompt>Use all the backups (including differential and incremental) to restore all of <%= $second_user %>'s files on the desktop system</prompt>

    <!--check for the first set of changes (shouldn't be there)(status1), the original files (shouldn't be there)(status2), then diff1(shouldn't be there)(status3), then the diff2(shouldn't be there)(status4), then inf1 (shouldn't be there), inf2 (should be there)-->
		<post_command>grep '<%= $hidden_flag %>' /home/<%= $second_user %>/personal_secrets/flag > /dev/null; status1=$?; ls /home/<%= $second_user %>/<%= $files.sample %> > /dev/null; status2=$?; grep <%= $rand_diff2 %> /home/<%= $second_user %>/personal_secrets/really_not_a_flag > /dev/null; status3=$?; grep <%= $rand2 %> /home/<%= $second_user %>/personal_secrets/<%= $rand2 %> > /dev/null; status4=$?; grep <%= $rand3 %> /home/<%= $second_user %>/personal_secrets/nothing_much > /dev/null; status5=$?; grep <%= $rand3 %> /home/<%= $second_user %>/notes > /dev/null; status6=$?; echo $status1$status2$status3$status4$status5$status6</post_command>
		<condition>
			<output_matches>000000</output_matches>
			<message>:) Well done! <%= $flags.pop %> </message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>00000</output_matches>
			<message>:( Close... You restored something, but not everything... Check the order you did your restore commands in.</message>
		</condition>
		<condition>
			<output_matches>0</output_matches>
			<message>:( You restored something, but not everything...</message>
		</condition>
		<condition>
			<output_matches>[1-9]{6}</output_matches>
			<message>:( You didn't restore anything.</message>
		</condition>
		<else_condition>
			<message>:( Something went wrong... Restore everything...</message>
		</else_condition>
	</attack>


	<attack>
    <!--shell on the desktop server-->

		<!-- topic: Rsync incremental-->
		<prompt>Restore <%= $second_user %>'s notes file to it's earliest state</prompt>

		<post_command>grep '<%= $first_notes %>' /home/<%= $second_user %>/notes > /dev/null; status1=$?; echo $status1</post_command>
		<condition>
			<output_matches>0</output_matches>
			<message>:) Well done! <%= $flags.pop %> </message>
			<trigger_next_attack>true</trigger_next_attack>
		</condition>
		<condition>
			<output_matches>[0-9]</output_matches>
			<message>:( That's not the earliest state...</message>
		</condition>
		<else_condition>
			<message>:( Something went wrong...</message>
		</else_condition>
	</attack>

</hackerbot>
