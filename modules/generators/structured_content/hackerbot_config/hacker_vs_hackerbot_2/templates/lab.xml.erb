<%
  require 'json'
  require 'securerandom'
  require 'digest/sha1'
  require 'fileutils'
  require 'erb'

  if self.accounts.empty?
    abort('Sorry, you need to provide an account')
  end

  $first_account = JSON.parse(self.accounts.first)
  $second_account = JSON.parse(self.accounts[1])
  $third_account = JSON.parse(self.accounts[2])

  $files = []
  $log_files = []
  if $first_account.key?("leaked_filenames") &&  $first_account['leaked_filenames'].size > 0
    $files = $first_account['leaked_filenames']
    $log_files = $first_account['leaked_filenames'].grep(/log/)
  end

  if $files.empty?
    $files = ['myfile', 'afile', 'filee', 'thefile']
  end
  if $log_files.empty?
    $log_files = ['log', 'thelog', 'logs', 'frogonalog']
  end

  $main_user = $first_account['username'].to_s
  $main_password = $first_account['password'].to_s
  $second_user = $second_account['username'].to_s
  $third_user = $third_account['username'].to_s
  $third_password = $third_account['password'].to_s
  $example_file = "/home/#{$second_user}/#{$files.sample}"
  $example_dir = "/home/#{$second_user}/personal_secrets/"

  $web_server_ip = self.web_server_ip.first
  $compromised_server_ip = self.compromised_server_ip.first
  $ids_server_ip = self.ids_server_ip.first
  $backup_server_ip = self.backup_server_ip.first
  $desktop_ip = self.desktop_ip.first
  $hackerbot_server_ip = self.hackerbot_server_ip.first
  $root_password = self.root_password
  $flags = self.flags

  $sensitive_files_location = "/home/#{$main_user}/trade_secrets/"

  REQUIRED_FLAGS = 10
  while $flags.length < REQUIRED_FLAGS
    $flags << "flag{#{SecureRandom.hex}}"
    Print.err "Warning: Not enough flags provided to hackerbot_config generator, some flags won't be tracked/marked!"
  end

  def get_binding
    binding
  end
-%>
<?xml version="1.0"?>

<hackerbot
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.github/cliffe/SecGen/hackerbot">
<!--<hackerbot xmlns="http://www.github/cliffe/SecGen/hackerbotz"-->

	<name>Hackerbot</name>

	<AIML_chatbot_rules>config/AIML</AIML_chatbot_rules>

	<!--Method for gaining shell access, can be overwritten per-attack-->
	<!--<get_shell>bash</get_shell>-->
	<get_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@{{chat_ip_address}} /bin/bash</get_shell>


	<messages>
		<show_attack_numbers />

		<greeting>You are about to be attacked!</greeting>

		<!--Must provide alternatives for each message-->
		<say_ready>When you are ready, simply say 'ready'.</say_ready>
		<say_ready>'Ready'?</say_ready>
		<next>Ok, I'll do what I can to move things along...</next>
		<next>Moving things along to the next one...</next>
		<previous>Ok, I'll do what I can to back things up...</previous>
		<previous>Ok, backing up.</previous>
		<goto>Ok, skipping it along.</goto>
		<goto>Let me see what I can do to goto that attack.</goto>
		<last_attack>There is also a flag to be found on the compromised server (End.)</last_attack>
    <last_attack>There is also a flag to be found on the compromised server (The End.)</last_attack>
		<first_attack>You are back to the beginning!</first_attack>
		<first_attack>This is where it all began.</first_attack>
		<getting_shell>Doing my thing...</getting_shell>
		<getting_shell>Here we go...</getting_shell>
		<got_shell>...</got_shell>
		<got_shell>....</got_shell>
		<repeat>Let me know when you are 'ready', if you want to move on say 'next', or 'previous' and I'll move things along.</repeat>
		<repeat>Say 'ready', 'next', or 'previous'.</repeat>

		<!--Single responses:-->
		<help>I am waiting for you to say 'ready', 'next', 'previous', 'list', 'goto *X*', or 'answer *X*'</help>
		<say_answer>Say "The answer is *X*".</say_answer>
		<no_quiz>There is no question to answer</no_quiz>
		<correct_answer>Correct</correct_answer>
		<incorrect_answer>Incorrect</incorrect_answer>
		<invalid>That's not possible.</invalid>
		<non_answer>Wouldn't you like to know.</non_answer>

		<!--can be overwritten per-attack-->
		<shell_fail_message>Oh no. Failed to get shell... You need to let us in.</shell_fail_message>
	</messages>

	<tutorial_info>
		<title>HvHB1</title>
		<tutorial><%= ERB.new(File.read self.templates_path + 'intro.md.erb').result(self.get_binding) %></tutorial>
		<footer>
<%= File.read self.templates_path + 'license.md.erb' %>

Randomised instance generated by [SecGen](http://github.com/cliffe/SecGen) (<%= Time.new.to_s %>)
		</footer>

		<provide_tutorial>true</provide_tutorial>

	</tutorial_info>


<!-- 1x random permission attacks-->
<%
  $permission_attacks = ['file_perms_attack_1.xml.erb', 'file_perms_attack_2.xml.erb', 'file_perms_attack_3.xml.erb', 'file_perms_attack_4.xml.erb'].shuffle
%>
<%= ERB.new(File.read self.templates_path + $permission_attacks.pop ).result(self.get_binding) %>

<!-- 2x random integrity attack-->
<%
  $integrity_attacks = ['integrity_attack1.xml.erb', 'integrity_attack2.xml.erb', 'integrity_attack3.xml.erb', 'integrity_attack4.xml.erb', 'integrity_attack5.xml.erb', 'integrity_attack6.xml.erb', 'integrity_attack7.xml.erb'].shuffle
%>
<%= ERB.new(File.read self.templates_path + $integrity_attacks.pop ).result(self.get_binding) %>
<%= ERB.new(File.read self.templates_path + $integrity_attacks.pop ).result(self.get_binding) %>

<!--1x network monitoring-->
<%
  $network_monitoring = ['network_monitoring_1.xml.erb', 'network_monitoring_2.xml.erb', 'network_monitoring_3.xml.erb'].shuffle
%>
<%= ERB.new(File.read self.templates_path + $network_monitoring.pop ).result(self.get_binding) %>

<!-- 1x random services -->
<%= ERB.new(File.read self.templates_path + 'random_service_ids_rule.xml.erb').result(self.get_binding) %>

<!--2x Snort rules-->
<%
  $snort_rules = ['snort_rule_1.xml.erb', 'snort_rule_2.xml.erb', 'snort_rule_3.xml.erb', 'snort_rule_4.xml.erb'].shuffle
%>
<%= ERB.new(File.read self.templates_path + $snort_rules.pop ).result(self.get_binding) %>
<%= ERB.new(File.read self.templates_path + $snort_rules.pop ).result(self.get_binding) %>

<!--1x random exfiltration rule-->
<%
  $snort_exfil_rules = ['exfiltration_rule_1.xml.erb', 'exfiltration_rule_2.xml.erb'].shuffle
%>
<%= ERB.new(File.read self.templates_path + $snort_exfil_rules.pop ).result(self.get_binding) %>
<!--1x protected content exfiltration rule-->
<%= ERB.new(File.read self.templates_path + 'exfiltration_rule_3_protected_content.xml.erb' ).result(self.get_binding) %>

<!--1x random live analysis-->
<%
  $live = ['live_analysis_1.xml.erb', 'live_analysis_2.xml.erb'].shuffle
%>
<%= ERB.new(File.read self.templates_path + $live.pop ).result(self.get_binding) %>
<!--1x open deleted file live-->
<%= ERB.new(File.read self.templates_path + 'live_analysis_3.xml.erb' ).result(self.get_binding) %>


<!--1x random dead analysis-->
<%
  $dead = ['dead_analysis_1.xml.erb', 'dead_analysis_2.xml.erb'].shuffle
%>
<%= ERB.new(File.read self.templates_path + $dead.pop ).result(self.get_binding) %>

</hackerbot>
