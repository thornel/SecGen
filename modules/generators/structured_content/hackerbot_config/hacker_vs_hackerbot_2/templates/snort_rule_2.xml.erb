	<attack>
<% $rand_content1 = SecureRandom.hex(3)
   $rand_alert2 = SecureRandom.hex(3) %>
		<pre_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_before; stat1=$?; (sleep 1; echo "USER <%= $rand_content1 %>"; sleep 2; killall -9 nc ) | nc <%= $web_server_ip %> 110 > /dev/null; (sleep 1; echo "user test"; echo "pass test"; echo "stat"; echo "quit"; sleep 2; killall -9 nc ) | nc <%= $web_server_ip %> 110 > /dev/null; stat2=$?; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_after; stat3=$?; echo --$stat1$stat2$stat3; diff -n /tmp/snort_alert_before /tmp/snort_alert_after | tail -n 5</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Create a Snort rule that detects any packet with the contents "<%= $rand_content1 %>" to <%= $web_server_ip %>. The alert must include the message "<%= $rand_alert2 %>".</prompt>

		<condition>
			<output_matches>^--1</output_matches>
			<message>:( Failed to scp to your system.</message>
		</condition>
		<condition>
			<output_matches>^--0.*<%= $rand_alert2 %>.*<%= $rand_alert2 %></output_matches>
			<message>:( Almost, but your rule triggered too many times. Are you inspecting the content of the connection?</message>
		</condition>
		<condition>
			<output_matches>^--0.*<%= $rand_alert2 %></output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_next_attack />
		</condition>
		<else_condition>
			<message>:( Your rule didn't get triggered (or didn't include the right message).</message>
		</else_condition>
	</attack>
