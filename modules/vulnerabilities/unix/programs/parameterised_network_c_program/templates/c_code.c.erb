#include <stdio.h>
#include <stdlib.h>    //strlen
#include <string.h>    //strlen
#include <stdbool.h>
#include <sys/socket.h>
#include <arpa/inet.h> //inet_addr
#include <unistd.h>    //write
#include <pthread.h> //for threading , link with lpthread
#include "authentication_helper.c"
#include "notes.c"

<% require 'json'
	$secret_function = @code["secret_function"];
%>

void *connection_handler(void *);
 
int main(int argc , char *argv[])
{
    int socket_desc , new_socket , c , *new_sock;
    struct sockaddr_in server , client;
    char *message;
         
	//Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if (socket_desc == -1)
    {
        printf("Could not create socket");
    }
     
    //Prepare the sockaddr_in structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons( 8888 );
     
    //Bind
    if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
    {
        puts("bind failed");
        fflush(stdout);
        return 1;
    }
    puts("bind done");
     
    //Listen
    listen(socket_desc , 3);
     
    //Accept and incoming connection
    puts("Waiting for incoming connections...");
    c = sizeof(struct sockaddr_in);
    while( (new_socket = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c)) )
    {
        puts("Connection accepted");
         
        //Reply to the client
        message = "Hello Client , I have received your connection. And now I will assign a handler for you\n";
        write(new_socket , message , strlen(message));
         
        pthread_t sniffer_thread;
        new_sock = malloc(1);
        *new_sock = new_socket;
         
        if( pthread_create( &sniffer_thread , NULL ,  connection_handler , (void*) new_sock) < 0)
        {
            perror("could not create thread");
            return 1;
        }
         
        //Now join the thread , so that we dont terminate before the thread
        //pthread_join( sniffer_thread , NULL);
        puts("Handler assigned");
    }
     
    if (new_socket<0)
    {
        perror("accept failed");
        return 1;
    }

    return 0;
}
 
/*
 * This will handle connection for each client
 * */
void *connection_handler(void *socket_desc)
{
    //Get the socket descriptor
    int sock = *(int*)socket_desc;
    int read_size;
    char *message , client_message[2000];

    //Send some messages to the client
    message = "Welcome to Easy Notes!\n";
    write(sock , message , strlen(message));

    bool exit_thread = false;
    bool authenticated = login(sock);

    if(authenticated == true){
        message = "Now you are logged in, you can start using the application. Enter 'help' for available commands.\n";
        write(sock , message , strlen(message));
    }

    //Receive a message from client
    while (authenticated == true && exit_thread == false && (read_size = recv(sock, client_message, 2000, 0)) > 0) {
        if (strncmp(client_message, "help", 4) == 0) {
            char *help_message = "Here are the list of commands you can use:\n";
            write(sock, help_message, strlen(help_message));
        } else if (strncmp(client_message, "list", 4) == 0) {
            //list_all_notes();
            write(sock, "list", 4);
        } else if (strncmp(client_message, "view", 4) == 0) {
            //view_note();
            write(sock, "view", 4);
        } else if (strncmp(client_message, "create", 6) == 0) {
            create_note(sock);
        } else if (strncmp(client_message, "edit", 4) == 0) {
            write(sock, "edit", 4);
        } else if (strncmp(client_message, "rename", 6) == 0) {
            write(sock, "rename", 6);
        } else if (strncmp(client_message, "delete", 6) == 0) {
            write(sock, "delete", 6);
        } else if (strncmp(client_message, "exit", 4) == 0) {
            write(sock, "exit.", 4);
            exit_thread = true;
        } else {
            message = "Command unrecognised.\n";
            write(sock , message , strlen(message));
        }
    }

    if(read_size == 0 || exit_thread == true || authenticated == false)
    {
		exit_thread = false;
        puts("Client disconnected");
        fflush(stdout);
    }
    else if(read_size == -1)
    {
        perror("recv failed");
    }

	//Close connection
	close(sock);
    //Free the socket pointer
    free(socket_desc);

    return 0;
}

<%= $secret_function %>

/**
* The code for setting up the multithread newtwork sockets was taken from a tutorial by Silver Moon on 24/12/2011 here:
* http://www.binarytides.com/socket-programming-c-linux-tutorial/
*/
