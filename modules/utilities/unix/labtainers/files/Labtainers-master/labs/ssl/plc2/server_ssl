#!/usr/bin/env python
'''
Simulate a PLC server
'''
import socket, ssl

SERVICE_PORT = 10023

def do_something(constream, data):
    print('received: %s' % data)
    if data is None:
        return False
    else:
        return True

def deal_with_client(connstream):
    data = connstream.read()
    # null data means the client is finished with us
    while data:
        if not do_something(connstream, data):
            # we'll assume do_something returns False
            # when we're finished with client
            break
        data = connstream.read()
    # finished with client

''' this host name, e.g., plc1 '''
this_host = socket.gethostname()
''' default ssl context '''
context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
''' cert chain for validating client certs '''
context.load_cert_chain(certfile=("certs/%s.example.com.cert.pem" % this_host), 
                        keyfile=("private/%s.example.com.key.pem" % this_host))
''' chain for validating the client '''
context.load_verify_locations('certs/ca-chain.cert.pem')
''' require client to have a cert '''
context.verify_mode = ssl.CERT_REQUIRED

''' bind socket and listen '''
bindsocket = socket.socket()
bindsocket.bind((this_host, SERVICE_PORT))
bindsocket.listen(5)

while True:
    ''' wait for client to open connection '''
    newsocket, fromaddr = bindsocket.accept()
    ''' ssl wrap_socket, will also validate client '''
    try:
        connstream = context.wrap_socket(newsocket, server_side=True)
    except (ssl.SSLEOFError, ssl.SSLError):
        print('SSL error, ignore connection request from %s' % str(fromaddr))
        continue
    ''' get cert and display client common name '''
    cert = connstream.getpeercert()
    subject = dict(x[0] for x in cert['subject'])
    issued_to = subject['commonName']
    print('Connection from %s' % issued_to)
    try:
        deal_with_client(connstream)
    finally:
        connstream.shutdown(socket.SHUT_RDWR)
        connstream.close()

