#!/usr/bin/env python
import socket
import sys
import time
import signal
import threading
import hashlib
import logging
import argparse
import os
import ConfigParser
import subprocess
import json

valid_commands = ['status', 'retrieve', 'load', 'reset']
def signal_handler(signal, frame):
    global connection
    global response_thread
    logging.debug('got signal, close connection')
    if connection is not None:
        connection.close()
    logging.debug('signal handler, exit')
    exit(0)


def getData(connection, who):
    '''
    Read data from the connection based on its initial 4 character size field.
    The who field is simply for debugging.
    '''
    rbytes = ''
    try:
        #logging.debug('%s getData get size' % who)
        size_str = connection.recv(4)
        if size_str is None or len(size_str) == 0:
            logging.debug('%s client closed' % who)
            return None
        try:
            size = int(size_str)
        except:
             logging.debug('getData could not parse int from <%s>' % size_str)
             exit(1)
        #logging.debug('%s getData size is %d' % (who, size))
        # Receive the data, but only up to size bytes 
        remaining = size
        while len(rbytes) < size:
            data = connection.recv(remaining)
            remaining = remaining - len(data)
            #logging.debug('received "%d bytes"' % len(data))
            if data:
                rbytes = rbytes + data
            else:
                logging.debug('no more data from', who)
                break
        if who != 'from-plc':
            for c in valid_commands:
                look = c+':'
                if rbytes.startswith(look):
                    logging.debug('Command: %s   received from %s' % (c, who))
            logging.debug('%s done read, got total of %d bytes' % (who, len(rbytes)))
    except socket.error:
        logging.debug('firewall socket error %s' % str(socket.error))
        connection.close()
        rbytes = None
    return rbytes

def sendData(connection, data, who):
    '''
    Send data to the connection, prefixed by a four character length field.
    The who field is simply for debugging
    '''
    size = len(data)
    logging.debug('%s sendData %d bytes' % (who, size))
    size_str = '%4d' % size
    connection.sendall(size_str)
    connection.sendall(data)

def responses(connection, remote_sock):
    #logging.debug('in responses')
    rdata = ''
    while rdata is not None:
        rdata = getData(remote_sock, 'from-plc')
        #logging.debug('responses back from getData with %s' % rdata)
        if rdata is not None:
            sendData(connection, rdata, 'responses')
        else:
            #logging.debug('responses got None from-plc')
            pass
    exit()
 
def checkData(data, whitelist):
    retval = True
    if data is None:
        retval = False
    elif data != 'status:' and data != 'retrieve:' and data != 'reset:':
         if data.startswith('load'):
             data = data[5:]
         m = hashlib.md5()
         m.update(data)
         d = m.hexdigest()
         logging.debug('digest is %s' % d)
         if d not in whitelist:
             logging.debug('digest FAILS %s' % d)
             retval = False

         if 'bad stuff' in data:
             retval = False
    return retval

def checkFilter(src_ip, rdata, filters):
    #logging.debug('check filters for ip %s' % src_ip)
    if src_ip not in filters:
        logging.debug('****** Address %s not in filters ******' % src_ip)
        return False
    authorized = filters[src_ip].split(',')
    for c in valid_commands:
        look = c+':'
        if rdata.startswith(look):
            if c not in authorized:
                logging.debug('***** Command %s not authorized for %s ***** ' % (c, src_ip))
                return False 
    return True
 
def runProxy(whitelist, config, filters):
    global connection
    global response_thread
    print('in run')
    sys.stderr = open('err.txt', 'w')
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    # Create a TCP/IP socket for firewall server & client
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    local_server_address = ('172.25.0.3', 10000)
    remote_server_address = ('172.26.0.3', 10000)
    logging.debug('starting up on %s port %s' % local_server_address)
    sock.bind(local_server_address)
    # Listen for incoming connections
    sock.listen(1)
    while True:
        #print('wait')
        # Wait for a connection
        logging.debug('waiting for a connection')
        try:
            connection, client_address = sock.accept()
        except:
            logging.error('failed accept on %s' % local_server_address)
            exit(1)
        src_ip, src_port = connection.getpeername()
        #logging.debug('got peer %s' % src_ip)
        connection.setblocking(True)
        connection.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        remote_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        remote_sock.connect(remote_server_address)
        remote_sock.setblocking(True)
        remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        response_thread = threading.Thread(target=responses, args=(connection, remote_sock))
        response_thread.start()
        rdata = ''
    
        while rdata is not None:
            rdata = getData(connection, src_ip)
            if rdata is not None:
                if len(filters) > 0:
                    if not checkFilter(src_ip, rdata, filters):
                        logging.debug('***** Filter blocked traffic *****')
                        rdata = None
                        continue
                if len(whitelist) > 0:
                    if checkData(rdata, whitelist):
                        sendData(remote_sock, rdata, 'to-server')
                    elif rdata is not None:
                        logging.debug('***** Data failed check, dropping it! *****')
                        rdata = None
                    else:
                        #logging.debug('got None from getData from-manager')
                        pass
                else:
                    ''' whitelist empty, just send it '''
                    sendData(remote_sock, rdata, 'to-server')
        #logging.debug('close the connections, we got None') 
        time.sleep(1)
        connection.close()
        try:
            remote_sock.shutdown(socket.SHUT_RDWR)
            remote_sock.close()
        except socket.error, msg:
            logging.debug('Failed to close remote_sock, client dropped?: %s' % msg)

def checkRunning():
    cmd = 'systemctl status firewall'
    ps = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    output = ps.communicate()
    if 'Active: active (running)' not in output[0]:
        return False
    else:
        return True

def validateCommands(command_list):
    clist = command_list.split(',')
    for c in clist:
        if c not in valid_commands:
            print('Unknown command %s.  Filter not modified.' % c)
            return False
    return True

def main():        
    LOGFILE = "./firewall.log"
    whitelist_file = "/etc/firewall_whitelist.txt"
    proxy_config = "/etc/firewall.config"
    config = ConfigParser.ConfigParser()
    config.read(proxy_config)
    whitelist = []
    filters = {}
    if os.path.isfile(whitelist_file):
        with open(whitelist_file) as fh:
            for line in fh:
                whitelist.append(line.strip()) 

    filter_file = "/etc/firewall_filter.txt"
    if os.path.isfile(filter_file): 
        with open(filter_file, 'r') as fh:
            try:
                filters = json.load(fh)
            except:
                ''' empty or corrupt json, just start with an empty one '''
                pass
    logging.basicConfig(filename=LOGFILE, level=logging.DEBUG, 
                         format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%y-%m-%d %H:%M:%S')
    global connection
    connection = None        
    parser = argparse.ArgumentParser(prog='plcfirewall', description='Run or configure the plc firewall.  The firewall can be configured to use \
       a whitelist of MD5 hashes to validate programs and data destined for the PLC.  Use the "-a" option to add a MD5 digest to the whitelist.\
       The default state of the firewall has an empty whitelist, which causes all traffic to be allowed through to the PLC. \
       Prior to altering the whitelist, you must stop the firewall from running by using "sudo systemctl stop firewall". \
       After changing the configuration, restart the firewall using "sudo systemctl start firewall."')
    parser.add_argument('-l', '--list', action='store_true', help='List the current command filters and whitelist signatures')
    parser.add_argument('-a', '--add', action='store', metavar=('digest'), help='Add a MD5 digest to the whitelist')
    parser.add_argument('-r', '--remove', action='store', metavar=('digest'), help='Remove a digest from the whitelist')
    parser.add_argument('-f', '--filter', action='store', nargs=2, metavar=('IP address, command list'), help='Filter PLC commands based on their source IP. \
                         The command list consists of authorized PLC commands, seperated by commas, with no spaces. \
                         The initial state of the firewall has no filters, which results in all commands from all sources being permitted. \
                         When there is at least one defined filter, then only commands that match a filter will be permitted. \
                         And command list value of "delete" will delete the filter entry for the given IP address. \
                         A command list value of "all" implies all commands, i.e., "status,retrieve,reset,load"')
 
    num_args = len(sys.argv)
    if num_args == 1:
        print("logging to ./firewall.log")
        if len(whitelist) == 0:
            print('Warning, whitelist is empty. All traffic will be permitted.')
            logging.debug('Warning, whitelist is empty. All traffic will be permitted.')
        logging.debug("Starting firewall")
        runProxy(whitelist, config, filters)
    else:
        args = parser.parse_args()
        if args.list:
            if len(filters) == 0:
                print('Filters is empty (no filtering will be applied)')
            else:
                print('Current filters:')
                for ip in filters:
                    print('\t%s:  %s' % (ip, filters[ip]))
            if len(whitelist) == 0:
                print('Whitelist is empty')
            else:
                print('Current whitelist:')
                for line in whitelist:
                    print('\t%s' % line)
        elif args.add is not None:
            if checkRunning():
                print('Use "sudo systemctl stop firewall" prior to changing the configuration')
            else:
                whitelist.append(args.add)
                with open(whitelist_file, 'w') as fh:
                    for line in whitelist:
                        fh.write(line+'\n')
        elif args.filter is not None:
            if checkRunning():
                print('Use "sudo systemctl stop firewall" prior to changing the configuration')
            else:
                ip, command_list = args.filter
                if command_list == 'delete' and ip in filters:
                    del filters[ip]
                elif command_list == 'all':
                    filters[ip] = 'status,retrieve,load,reset'
                else:
                    if validateCommands(command_list):
                        filters[ip] = command_list
            
                with open(filter_file, 'w') as fh:
                    json.dump(filters, fh)
          

if __name__ == '__main__':
    sys.exit(main())

