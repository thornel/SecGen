/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ResultsUI;

import static ResultsUI.ParamReferenceStorage.FieldType_ITEMS;
import static ResultsUI.ParamReferenceStorage.LOG_ACCESIBLE_FieldType;
import static ResultsUI.ParamReferenceStorage.LOG_TS_ACCESSIBLE_LineType;
import static ResultsUI.ParamReferenceStorage.LineType_ITEMS;
import static ResultsUI.ParamReferenceStorage.SpecialTimeStampType;
import static ResultsUI.ParamReferenceStorage.TimestampType_ITEMS;
import static ResultsUI.ParamReferenceStorage.justFieldType;
import static ResultsUI.ParamReferenceStorage.lineParamAccessible;
import static ResultsUI.ParamReferenceStorage.timeStampDelimiterAccessible;
import ResultsUI.ToolTipHandlers.ToolTipWrapper;
import static ResultsUI.ToolTipHandlers.setComboItems;
import java.awt.Dimension;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Dan
 */
public class ArtifactPanels extends javax.swing.JPanel {

    static Dimension dim = new Dimension(975, 100);
    ResultsUI uiResult;
    ResultsData dataUI;
    int rowNum;
        
    //Creating fresh artifact line
    public ArtifactPanels(ResultsUI ui, ArrayList<String> containers, int rowNum) {
        initComponents();
        this.uiResult = ui;
        this.dataUI = ui.dataUI;
        this.rowNum = rowNum;
        rowLabel.setText(Integer.toString(rowNum));
        TimeDelimiterTextField.setVisible(false);
                
        //Load ComboBox Items
        ContainerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(containers.toArray(new String[containers.size()])));   
        setComboItems(FieldTypeComboBox, FieldType_ITEMS);
        setComboItems(LineTypeComboBox, LineType_ITEMS);
        setComboItems(TimeStampComboBox, TimestampType_ITEMS);   
        
        this.revalidate();
        this.repaint();
    }
    
    //Loading artifact line
    public ArtifactPanels(ResultsUI ui, ArrayList<String> containers, int rowNum, String resultTag, String container, String fileID, ToolTipWrapper fieldType, String fieldID, ToolTipWrapper lineType, String lineID, ToolTipWrapper timeStampType, String timeStampDelimiter) {
        initComponents();
        this.uiResult = ui;
        this.dataUI = ui.dataUI;
        this.rowNum = rowNum;
        rowLabel.setText(Integer.toString(rowNum));      
        if(!timeStampDelimiterAccessible.contains(timeStampType.getItem()))
            TimeDelimiterTextField.setVisible(false);
        
        //Load ComboBox Items
        ContainerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(containers.toArray(new String[containers.size()])));
        setComboItems(FieldTypeComboBox, FieldType_ITEMS);
        setComboItems(LineTypeComboBox, LineType_ITEMS);
        setComboItems(TimeStampComboBox, TimestampType_ITEMS);
        
        //Set Values
        setContainerComboBox(container);       
        setFieldIDTextField(fieldID);      
        setTagTextField(resultTag);
        setFileTextField(fileID);        
        setFieldTypeComboBox(fieldType);         
        setLineIDTextField(lineID);         
        setLineTypeComboBox(lineType);          
        setTimeStampComboBox(timeStampType);          
        setTimeDelimiterTextField(timeStampDelimiter);
        
        this.revalidate();
        this.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ArtifactPanel = new javax.swing.JPanel();
        TagTextField = new javax.swing.JTextField();
        ContainerComboBox = new javax.swing.JComboBox<>();
        FileTextField = new javax.swing.JTextField();
        FieldTypeComboBox = new javax.swing.JComboBox<>();
        LineTypeComboBox = new javax.swing.JComboBox<>();
        FieldIDTextField = new javax.swing.JTextField();
        LineIDTextField = new javax.swing.JTextField();
        TimeStampComboBox = new javax.swing.JComboBox<>();
        TimeDelimiterTextField = new javax.swing.JTextField();
        DeleteButton = new javax.swing.JButton();
        rowLabel = new javax.swing.JLabel();
        UpButton = new javax.swing.JButton();
        DownButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1110, 69));

        ArtifactPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ArtifactPanel.setMinimumSize(new java.awt.Dimension(1400, 0));
        ArtifactPanel.setPreferredSize(new java.awt.Dimension(1300, 34));

        FieldTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FieldTypeComboBoxItemStateChanged(evt);
            }
        });

        LineTypeComboBox.setToolTipText("Identifies how the line is to be identified");
        LineTypeComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Line Type"));
        LineTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LineTypeComboBoxItemStateChanged(evt);
            }
        });

        FieldIDTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Field ID"));

        LineIDTextField.setToolTipText("Parameter based on Line Type");
        LineIDTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Line ID"));

        TimeStampComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Timestamp Type"));
        TimeStampComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TimeStampComboBoxItemStateChanged(evt);
            }
        });

        TimeDelimiterTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TimeDelimiterTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Time Delimiter"));
        TimeDelimiterTextField.setMinimumSize(new java.awt.Dimension(20, 100));

        javax.swing.GroupLayout ArtifactPanelLayout = new javax.swing.GroupLayout(ArtifactPanel);
        ArtifactPanel.setLayout(ArtifactPanelLayout);
        ArtifactPanelLayout.setHorizontalGroup(
            ArtifactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArtifactPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContainerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(FileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FieldTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FieldIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(LineTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LineIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TimeStampComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TimeDelimiterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ArtifactPanelLayout.setVerticalGroup(
            ArtifactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArtifactPanelLayout.createSequentialGroup()
                .addGroup(ArtifactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ArtifactPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(ArtifactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ContainerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FieldTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ArtifactPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ArtifactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(LineTypeComboBox)
                            .addComponent(LineIDTextField)
                            .addComponent(TimeStampComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FieldIDTextField)
                            .addComponent(TimeDelimiterTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        ArtifactPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {TimeDelimiterTextField, TimeStampComboBox});

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        rowLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        rowLabel.setText("10");

        UpButton.setText("^");
        UpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpButtonActionPerformed(evt);
            }
        });

        DownButton.setText("v");
        DownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rowLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ArtifactPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ArtifactPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rowLabel)
                .addGap(19, 19, 19))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(UpButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DownButton))
                .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
       JPanel container = (JPanel)this.getParent();
       container.remove(this);
       uiResult.dataUI.rowCount--;
       uiResult.refresh();
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void TimeStampComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TimeStampComboBoxItemStateChanged
        timeStampListener();
    }//GEN-LAST:event_TimeStampComboBoxItemStateChanged

    private void LineTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LineTypeComboBoxItemStateChanged
        lineTypeListener();
    }//GEN-LAST:event_LineTypeComboBoxItemStateChanged

    private void FieldTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FieldTypeComboBoxItemStateChanged
        fieldTypeListener();
    }//GEN-LAST:event_FieldTypeComboBoxItemStateChanged

    private void UpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpButtonActionPerformed
        swapUpdate("UP", rowNum-1); //Subtract rowNum by one to get the proper index number
    }//GEN-LAST:event_UpButtonActionPerformed

    private void DownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownButtonActionPerformed
        swapUpdate("DOWN", rowNum-1); //Subtract rowNum by one to get the proper index number
    }//GEN-LAST:event_DownButtonActionPerformed

    //The listeners sees what values are present in their respective fields and then changes the interface based on that(remove or adding other fields)
    private void lineTypeListener(){
        ToolTipWrapper lineType = (ToolTipWrapper)LineTypeComboBox.getSelectedItem();
        
        if(lineType.getItem().equals("NONE")){
            LineIDTextField.setVisible(false);
        }
        else
            LineIDTextField.setVisible(true);
        

        //Does the line type allow for LOG_TS option in the TimeStampComboBox?
        if(LOG_TS_ACCESSIBLE_LineType.contains(lineType.getItem())){               
            //Add "LOG_TS" to the timestampComboBox if it's not already
            if(((DefaultComboBoxModel)TimeStampComboBox.getModel()).getIndexOf(SpecialTimeStampType[0]) == -1)
                TimeStampComboBox.addItem(SpecialTimeStampType[0]);
        }
        else{
            ToolTipWrapper fieldTypeTTW = (ToolTipWrapper)FieldTypeComboBox.getSelectedItem();
            //Remove "LOG_TS" from the timestampComboBox if it's not already
            if(((DefaultComboBoxModel)TimeStampComboBox.getModel()).getIndexOf(SpecialTimeStampType[0]) != -1 && !LOG_ACCESIBLE_FieldType.contains(fieldTypeTTW.getItem()))
                TimeStampComboBox.removeItem(SpecialTimeStampType[0]);
        }
        
        this.revalidate();
        this.repaint();
    }
    
    private void fieldTypeListener(){  
        ToolTipWrapper fieldType = (ToolTipWrapper)FieldTypeComboBox.getSelectedItem();

        //Does the fieldType allow for certain user inputs
        if(!justFieldType.contains(fieldType.getItem())){
            FieldIDTextField.setVisible(true);
            if(lineParamAccessible.contains(fieldType.getItem())){
                LineTypeComboBox.setVisible(true);
                LineIDTextField.setVisible(true);
            }
            else{
               setLineTypeComboBox(LineType_ITEMS[0]);
               LineTypeComboBox.setVisible(false);
               setLineIDTextField("");
               LineIDTextField.setVisible(false); 
            }         
        }
        else{
            setFieldIDTextField("");
            FieldIDTextField.setVisible(false);
            setLineTypeComboBox(LineType_ITEMS[0]);
            LineTypeComboBox.setVisible(false);
            setLineIDTextField("");
            LineIDTextField.setVisible(false);
        }
       
        /*
        If the selected Field Type allows for the "LOG_TS" and "LOG_RANGE" in the timeStampComboBox, 
        then make sure to add them if they aren't there already
        */
        if(LOG_ACCESIBLE_FieldType.contains(fieldType.getItem())){
            //Add "LOG_TS" to the timestampComboBox if it's not already
            if(((DefaultComboBoxModel)TimeStampComboBox.getModel()).getIndexOf(SpecialTimeStampType[0]) == -1)
                TimeStampComboBox.addItem(SpecialTimeStampType[0]);
            //Add "LOG_RANGE" to the timestampComboBox if it's not already
            if(((DefaultComboBoxModel)TimeStampComboBox.getModel()).getIndexOf(SpecialTimeStampType[1]) == -1)
                TimeStampComboBox.addItem(SpecialTimeStampType[1]);          
        }
        /*
        If the selcted Field Type doesn't allow for "LOG_TS" and "LOG_RANGE" in the timeStampComboBox, 
        then make sure to remove them if they're still in the box
        */
        else{
            ToolTipWrapper lineType = (ToolTipWrapper)LineTypeComboBox.getSelectedItem();
            //Remove "LOG_TS" from the timestampComboBox if it's not already
            if(((DefaultComboBoxModel)TimeStampComboBox.getModel()).getIndexOf(SpecialTimeStampType[0]) != -1 && !LOG_TS_ACCESSIBLE_LineType.contains(lineType.getItem()))
                TimeStampComboBox.removeItem(SpecialTimeStampType[0]);
            //Remove "LOG_RANGE" from the timestampComboBox if it's there
            if(((DefaultComboBoxModel)TimeStampComboBox.getModel()).getIndexOf(SpecialTimeStampType[1]) != -1)
                TimeStampComboBox.removeItem(SpecialTimeStampType[1]);          
        }
        
        ArtifactPanel.revalidate();
        ArtifactPanel.repaint();
    }
    
    private void timeStampListener(){
        ToolTipWrapper timestamptype = (ToolTipWrapper)TimeStampComboBox.getSelectedItem();
        //Does the timestamp Type allow for Time Delimiter input
        if(timeStampDelimiterAccessible.contains(timestamptype.getItem()))
            TimeDelimiterTextField.setVisible(true);
        else{
            setTimeDelimiterTextField("");
            TimeDelimiterTextField.setVisible(false);
        }
        ArtifactPanel.revalidate();
        ArtifactPanel.repaint();
    }
    
    //Swaps artifact order in the list of artifacts and then redraws them
    void swapUpdate(String type, int rowIndex){
        //System.out.println("RowCOUNT(swap): " +dataUI.rowCount);
        dataUI.updateListofArtifacts(uiResult.getPanelofArtifacts());
        dataUI.swapArtifacts(type, rowIndex);
        uiResult.artifactsPanelRedraw();
    }
    
       
    //Field Getters
    public JComboBox<String> getContainerComboBox(){
        return ContainerComboBox;
    }    
    public JTextField getFieldIDTextField(){
        return FieldIDTextField;
    }
    public JTextField getTagTextField(){
        return TagTextField;
    }
    public JTextField getFileTextField(){
        return FileTextField;
    }
    public JComboBox<ToolTipWrapper> getFieldTypeComboBox(){
        return FieldTypeComboBox;
    }
    public JTextField getLineIDTextField(){
        return LineIDTextField;
    }
    public JComboBox<ToolTipWrapper> getLineTypeComboBox(){
        return LineTypeComboBox;
    }    
    public JComboBox<ToolTipWrapper> getTimeStampComboBox(){
        return TimeStampComboBox;
    }
    public JTextField getTimeStampTextField(){
        return TimeDelimiterTextField;
    }

    //Field SETTERS
    private void setContainerComboBox(String v){
        ContainerComboBox.setSelectedItem(v);
    }    
    private void setFieldIDTextField(String v){
        FieldIDTextField.setText(v);
    }
    private void setTagTextField(String v){
        TagTextField.setText(v);
    }
    private void setFileTextField(String v){
        FileTextField.setText(v);
    }
    private void setFieldTypeComboBox(ToolTipWrapper v){
        FieldTypeComboBox.setSelectedItem(v);
    }
    private void setLineIDTextField(String v){
        LineIDTextField.setText(v);
    }
    private void setLineTypeComboBox(ToolTipWrapper v){
        LineTypeComboBox.setSelectedItem(v);
    }    
    private void setTimeStampComboBox(ToolTipWrapper v){
        TimeStampComboBox.setSelectedItem(v);
    }
    private void setTimeDelimiterTextField(String v){
        TimeDelimiterTextField.setText(v);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ArtifactPanel;
    private javax.swing.JComboBox<String> ContainerComboBox;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton DownButton;
    private javax.swing.JTextField FieldIDTextField;
    private javax.swing.JComboBox<ToolTipWrapper> FieldTypeComboBox;
    private javax.swing.JTextField FileTextField;
    private javax.swing.JTextField LineIDTextField;
    private javax.swing.JComboBox<ToolTipWrapper> LineTypeComboBox;
    private javax.swing.JTextField TagTextField;
    private javax.swing.JTextField TimeDelimiterTextField;
    private javax.swing.JComboBox<ToolTipWrapper> TimeStampComboBox;
    private javax.swing.JButton UpButton;
    private javax.swing.JLabel rowLabel;
    // End of variables declaration//GEN-END:variables
}
