package ResultsUI;


import static ResultsUI.ResultsData.artifactValuesDiffer;
import java.awt.Component;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dan
 */
public class ResultsUI extends javax.swing.JFrame {
    ResultsData dataUI;
        
    public ResultsUI() {
        initComponents();
        LabNotExist.setVisible(false);
        
        dataUI = new ResultsData(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollPaneOfArtifacts = new javax.swing.JScrollPane();
        PanelofArtifacts = new javax.swing.JPanel();
        UpdateButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        RemoveAllButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        CreateButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        LabNameTextField = new javax.swing.JTextField();
        LabNotExist = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1590, 500));
        setPreferredSize(new java.awt.Dimension(1585, 389));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ScrollPaneOfArtifacts.setAutoscrolls(true);
        ScrollPaneOfArtifacts.setMaximumSize(new java.awt.Dimension(1300, 800));

        PanelofArtifacts.setLayout(new javax.swing.BoxLayout(PanelofArtifacts, javax.swing.BoxLayout.PAGE_AXIS));
        ScrollPaneOfArtifacts.setViewportView(PanelofArtifacts);

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Container");
        jLabel2.setToolTipText("Identifies the container hosting the file. \nIf \"ALL\" is selected, then the file is across all the containers.");

        RemoveAllButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        RemoveAllButton.setText("Remove All");
        RemoveAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveAllButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel9.setText("Lab Name: ");

        CreateButton.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        CreateButton.setText("Create");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Field Type");
        jLabel3.setToolTipText("The mode in which a value is found.");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("File");
        jLabel5.setToolTipText("File should either be a file path or a program/utility name with the \".stdin\", \".stdout\", or \".prgout\" extension.\n\n Ex. \"test.stdin\", \".local/result/sniff.txt\" ");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Result Tag");
        jLabel1.setToolTipText("The symbolic name of the result, which will be referenced in the goals configuration file. \n\n(It must be alphanumeric, underscores permitted) ");

        LabNameTextField.setPreferredSize(new java.awt.Dimension(6, 25));
        LabNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabNameTextFieldActionPerformed(evt);
            }
        });

        LabNotExist.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LabNotExist.setText("Lab does not exist!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CreateButton)
                        .addGap(10, 10, 10)
                        .addComponent(RemoveAllButton)
                        .addGap(98, 98, 98)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LabNotExist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 344, Short.MAX_VALUE)
                        .addComponent(UpdateButton))
                    .addComponent(ScrollPaneOfArtifacts, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1)
                .addGap(74, 74, 74)
                .addComponent(jLabel2)
                .addGap(66, 66, 66)
                .addComponent(jLabel5)
                .addGap(131, 131, 131)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(RemoveAllButton)
                        .addComponent(jLabel9)
                        .addComponent(LabNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateButton)
                        .addComponent(LabNotExist)))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPaneOfArtifacts, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        update();
    }//GEN-LAST:event_UpdateButtonActionPerformed
    
    private void update(){
        if(dataUI.labloaded)
            dataUI.writeResultsConfig(PanelofArtifacts);
    }
    
    private void LabNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabNameTextFieldActionPerformed
        loadLab();
    }//GEN-LAST:event_LabNameTextFieldActionPerformed
    
    //Checks if the lab exists and will load lab's result config if it does
    private void loadLab(){
        dataUI = new ResultsData(getLabName()); 
        //System.out.println("RowCount(Load): " + dataUI.rowCount);
        
        if(dataUI.labloaded){
            LabNotExist.setVisible(false);
            artifactsPanelRedraw();
        }
        else
            LabNotExist.setVisible(true);
    }
 
    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        createFreshArtifact();
    }//GEN-LAST:event_CreateButtonActionPerformed
    
    //Creates and loads a new artifact row
    private void createFreshArtifact(){
        if(dataUI.labloaded){
            dataUI.rowCount++;
            ArtifactPanels newArtifact = new ArtifactPanels(this, dataUI.containerList, dataUI.rowCount);
            PanelofArtifacts.add(newArtifact);
            PanelofArtifacts.revalidate();
            PanelofArtifacts.repaint(); 
        }  
    }
        
    private void RemoveAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveAllButtonActionPerformed
        removeAllButton();
    }//GEN-LAST:event_RemoveAllButtonActionPerformed
    
    private void removeAllButton(){
        if(dataUI.labloaded){
           if(JOptionPane.showConfirmDialog(null, "Are you sure you want to remove all?") == JOptionPane.YES_OPTION){
                removeAllArtifacts();
                dataUI.rowCount = 0;
        
           }          
        }
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        checkUnsavedChangesMade();
    }//GEN-LAST:event_formWindowClosing
    
    //Check if the the current state of the UI matches with what's saved in the goals.config
    void checkUnsavedChangesMade(){
        if(dataUI.labloaded){
            dataUI.updateListofArtifacts(PanelofArtifacts);

            if(artifactValuesDiffer(dataUI.listofArtifacts, dataUI.getArtifactValuesOfConfigFile())){
                int confirmed = JOptionPane.showConfirmDialog(null, 
                    "There are Unsaved Changes. Are you sure you want to exit the program?", "Unsaved Changes",
                    JOptionPane.YES_NO_OPTION);

                if (confirmed == JOptionPane.YES_OPTION) 
                    dispose();
                else
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            }
            else
                dispose();
        }
    }
    
//General Methods
    //Updates the list of artifacts and redraws them on screen
    void refresh(){
       dataUI.updateListofArtifacts(PanelofArtifacts);       
       artifactsPanelRedraw();
    }
    
    //Redraws the artifacts Panel
    void artifactsPanelRedraw(){
        removeAllArtifacts();               
        //redraw the artifacts
        for(int i=0; i < dataUI.listofArtifacts.size(); i++){
            loadArtifact(dataUI.listofArtifacts.get(i), i+1);
        }
    }
    
    //Removes all the artifact lines for the lab *note: this doesn't update results.config or the resultsData until the user hits the update button
    private void removeAllArtifacts(){
        Component[] componentList = PanelofArtifacts.getComponents();
        for(Component c: componentList)
            PanelofArtifacts.remove(c);

        PanelofArtifacts.revalidate();
        PanelofArtifacts.repaint();
    }
    
      //Load's the artifactlinePanel into GUI
    private void loadArtifact(ArtifactValues artifactVal, int rowNum){
        ArtifactPanels newArtifact = new ArtifactPanels(this, dataUI.containerList, rowNum,
                                                        artifactVal.resultTag, 
                                                        artifactVal.container, 
                                                        artifactVal.fileID, 
                                                        artifactVal.fieldType, 
                                                        artifactVal.fieldID, 
                                                        artifactVal.lineType, 
                                                        artifactVal.lineID, 
                                                        artifactVal.timeStampType, 
                                                        artifactVal.timeStampDelimiter);
        PanelofArtifacts.add(newArtifact);        
        PanelofArtifacts.revalidate();
        PanelofArtifacts.repaint(); 
    }
    
    //Gets the labname
    private String getLabName(){
        return LabNameTextField.getText();
    }
    
    //Gets the panel holding the artifacts
    protected JPanel getPanelofArtifacts(){
        return PanelofArtifacts;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       //</editor-fold>
       
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            ResultsUI newResultsUI = new ResultsUI();
            newResultsUI.setSize(1005, 1000);
            newResultsUI.setVisible(true);
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateButton;
    private javax.swing.JTextField LabNameTextField;
    private javax.swing.JLabel LabNotExist;
    private javax.swing.JPanel PanelofArtifacts;
    private javax.swing.JButton RemoveAllButton;
    private javax.swing.JScrollPane ScrollPaneOfArtifacts;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
