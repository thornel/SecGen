#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ptrace.h>
#include <sys/types.h>
#define MAXSIZE 4096
#define USERDEF1 AAAAAA
#define USERDEF2 BBBBBB

static char encoding_table[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                                'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                                'w', 'x', 'y', 'z', '0', '1', '2', '3',
                                '4', '5', '6', '7', '8', '9', '+', '/'};

char msg[] =
"Malware can hijack many functions through the use of LD_PRELOAD. Security\n"
"checks using the function getuid() are particularly vulnerable.\n"
"In this level, when you guess the password incorrectly, the program will\n"
"give you a hint as to what the password is, if you have a specific\n"
"UID. If you are able to to hijack the getuid() function and get it to\n"
"output a specific UID, you will receive the password. In order to\n"
"solve this level, create a dynamic shared object file that implements\n"
" getuid() and returns the UID. Use LD_PRELOAD to preload your library.\n"
"You will need to employ specific flags within gcc that will produce\n"
"dynamic, position-independent, shared object code.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void detectTrace(void) __attribute__((constructor));
void detectTrace(void) {
	if(ptrace(PTRACE_TRACEME, 0, 1, 0) < 0) {
		printf("Sorry, we have disallowed debuggers on this assignment.\n");
		exit(1);
	};
};

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main() {
	char input[10], output[10];
	int i,flag,cnt = 0;
	unsigned int seed=USERDEF1;
	char modulus;

	print_msg();

	flag = 0;
	for (i=0; i < 10; i++) {
		input[i]=0;
		output[i]=0;	
	}

	printf("Enter the password: ");
	//fgets(input, 10, stdin);
	scanf("%9s",input);

	printf("If you run this program with the UID of %d, the password\n", USERDEF2);
	printf("the password will be given on the nextline.\n\n");

	for (i=0; (i < MAXSIZE) && (cnt < 9); i++) {
		seed = (seed * 214013) + 2531011;
		modulus = seed % 61;
		if (!(i % 256)) {
			flag += abs(input[cnt]-encoding_table[modulus]);
			output[cnt] = encoding_table[(modulus)%64];
			cnt++;
		}
	}

	if(getuid() != USERDEF2) {
		printf("Error: UID %d ran us. We expected UID %d.\n", getuid(), USERDEF2);
	} else {
		printf("Hint: %s\n", output);
	}
	
	if(flag){
	    printf("Try again.\n");
	} else {
	    printf("Good Job.\n");
	    printflag();
	}

	return 0;
}

