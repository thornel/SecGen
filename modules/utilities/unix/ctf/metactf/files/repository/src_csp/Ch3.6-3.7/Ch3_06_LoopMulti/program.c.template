/* Derived from a level by Sascha Strand, New Beginnings 12/2016 */
#include <stdio.h>
#include <fcntl.h>
#include <signal.h>
#include <stdlib.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/ptrace.h>

#define USERDEF0 AAAAAA
#define USERDEF1 BBBBBB
#define USERDEF2 CCCCCC

char msg[] = \
  "In this level, there is a function called loop_multi that has 3 for\n"
  "loops in it.  To solve the level, use objdump to find the number of\n"
  "times each loop is executed.  Then enter each number in decimal,\n"
  "separated by spaces to unlock the level.  For example if the number\n"
  "of iterations in the first, second, and third loops are 30, 40, and 50,\n"
  "enter '30 40 50'\n\n";

void detectTrace(void) __attribute__((constructor));
void detectTrace(void) {
        if(ptrace(PTRACE_TRACEME, 0, 1, 0) < 0) {
                printf("Sorry, we have disallowed debuggers on this assignment.\n");
                exit(1);
        };
};
/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void loop_multi(unsigned int *a) {
	unsigned int i;
	for (i=0; i < USERDEF0; i++)
		a[0]--;
	for (i=0; i < USERDEF1; i++)
		a[1]--;
	for (i=0; i < USERDEF2; i++)
		a[2]--;
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main() {
    unsigned int a[3];

    print_msg();

    printf("Enter the password: ");
    if (scanf("%u %u %u",&a[0],&a[1],&a[2]) != 3) {
       printf("Need 3 numbers.\nTry again.\n");
       exit(0);
    }

    loop_multi(a);
    if (!a[0] && !a[1] && !a[2]) {
	    printf("Good Job.\n");
	    printflag();
    } else {
	sleep(1);
        printf("Num1_OK? %d  Num2_OK? %d  Num3_OK? %d\n",!a[0], !a[1], !a[2]);
	printf("Try again.\n");
    }
    return 0;
}
