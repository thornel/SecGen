/* Derived from CTF level by Fan Zhang New Beginnings Fall 2015 */
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#define USERDEF AAAAAA

void printflag();

char msg[] =
 "Stack canaries and non-executable stacks make stack exploitation difficult. Such\n"
 "techniques, however, do not protect against return-oriented programming where\n"
 "only the return addresses on the stack are targeted.  In this level, you control\n"
 "a single write into a vulnerable buffer in the function prompt_user.  Overflow\n"
 "the buffer to modify the return address beyond the stack canary so that it\n"
 "points to a function of your choice.  The level will prompt you with an offset\n"
 "(in decimal) from the beginning of the buffer that will be written into followed\n"
 "by a hexadecimal value that will be written there (e.g. scanf(\"%d %x\");).\n"
 "The program will then write the hexadecimal value to a location computed\n"
 "using the offset.  To determine how close you are, examine the pointer\n"
 "being used to write into the stack and how far away it is from the value\n"
 "of $rsp when the retq instruction at the end of prompt_user is reached.\n\n";

void print_good() {
	printf("Good Job.\n");
    printflag();
    exit(0);
}

void print_msg() {
    printf("%s",msg);
}

void prompt_user() {
    char buffer[AAAAAA];
    int offset;
    char *user_addr;
    char **over_addr;
    printf("Enter the password: ");
    scanf("%d %lx", &offset, (unsigned long *) &user_addr);
    over_addr = (char **) (buffer + offset);
    *over_addr = user_addr;
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char *argv[]) {
    print_msg();
    prompt_user();
    printf("Try again.\n");
    return 0;
}
