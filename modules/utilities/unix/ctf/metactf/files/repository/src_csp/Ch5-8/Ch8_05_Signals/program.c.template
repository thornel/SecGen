/* Derived from CTF level by Lydia Simmons New Beginnings Fall 2015 */
#include <stdio.h>
#include <fcntl.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <string.h>

#define USERDEF "AAAAAA"

int level = 0;

void print_msg(char* m);

char cont_msg[] =
 "\n\n"
 "---------------------\n"
 "1. SIGCONT successful!\n"
 "---------------------\n"
 "We have detected, caught, and specially handled the SIGCONT signal you have\n"
 "generated.  In response, we have generated a child process using \"fork\".\n"
 "Unfortunately, the child process contains an infinite loop and the parent\n"
 "is stuck waiting for the child to terminate.  In another shell, issue the\n"
 "process list command \"ps -al\" to view the PID (process ID) and PPID\n"
 "(parent process ID) of the current processes.  As process ID numbers\n"
 "are given in increasing order, identify the parent and child process for\n"
 "this program.  Then, use \"kill <PID>\" to end the child process. By\n"
 "default, kill sends a SIGTERM to a process; this signal politely requests\n"
 "a program's termination.  Note that if you don't wish to use a separate\n"
 "shell, you may suspend the process via Ctrl-Z to return to the shell and\n"
 "issue the signal, then return back using fg when you are done.\n\n";

char chld_msg[] =
 "\n"
 "   *---*---*---*---*---*-\n"
 "   2. SIGCHLD successful!\n"
 "   *---*---*---*---*---*-\n"
 "   We have detected a SIGCHLD, which indicates that the child process has\n"
 "   terminated.  In addition to signals given manually or process-to-process,\n"
 "   many signals come from the operating system. For example, a program might\n"
 "   receive a SIGWINCH as a result of a certain change in its environment.\n"
 "   Lookup the SIGWINCH signal and perform an action that might generate it\n"
 "   in order to continue\n\n";

char winch_msg[] =
 "\n\n\n\n\n\n\n\n"
 "      *-*-*-*-*-*-*-*-*-*-*-*\n"
 "      3. SIGWINCH successful!\n"
 "      *-*-*-*-*-*-*-*-*-*-*-*\n"
 "      Another external signal that a process might receive is SIGPWR.  This\n"
 "      signal is generated when the system experiences a power failure.  When\n"
 "      received, the signal allows the program to cleanly exit before the system\n"
 "      is forced to shut down.  One can generate the signal for testing purposes\n"
 "      using the \"kill\" command from the shell.  The command can send an\n"
 "      arbitrary signal to a program by using the signal name as a flag. For\n"
 "      example, \"kill -SIGFPE 12345\" will send a floating-point error signal\n"
 "      to PID 12345. Use kill to send SIGPWR to this process.\n\n";

char pwr_msg[] =
 "\n"
 "         *********************\n"
 "         4. SIGPWR successful!\n"
 "         *********************\n"
 "         Finally, use Ctrl-C to end this process by sending it a SIGINT, the\n"
 "         program interrupt signal.  We have installed a signal handler that\n"
 "         will catch this signal and, instead of terminating the program, will\n"
 "         print out the password you need to unlock the level.\n\n";

char msg[] =
 "In this level, you will use signals to uncover the password to unlock the\n"
 "binary.  If you know the password, simply enter it.  If you don't, then\n"
 "instead of entering in a password, deliver a SIGSTOP signal to the process\n"
 "by pressing Ctrl-Z.  This stops execution without terminating the process.\n"
 "The shell command \"fg\" will resume the most recently suspended job and\n"
 "send it a SIGCONT.  Suspend and resume this program to continue or...\n\n";

char chaff5[12] = "s3sOylCO";
char chaff6[12] = "KpMCmNKz";
char chaff7[12] = "yZUEEOFo";
char chaff10[12] = USERDEF;
char chaff8[12] = "rQwHzJrk";
char chaff9[12] = "SeCmlYB0";

void cont_handler(int sig){
  if(level == 0) {
    level = 1;
    print_msg(cont_msg);
    if(fork() == 0) {
      while(1);
    }
  }
}

void chld_handler(int sig){
  int wstatus;
  if(level == 1) {
    level = 2;
    print_msg(chld_msg);
    wait(&wstatus);
  }
}

void winch_handler(int sig){
  if(level == 2) {
    level = 3;
    print_msg(winch_msg);
  }
}

void pwr_handler(int sig){
  if(level == 3) {
    level = 4;
    print_msg(pwr_msg);
  }
}

void int_handler(int sig){
  if(level == 4) printf("Try %s\n", chaff10);
  exit(0);
}

void print_msg(char* m) {
    printf("%s",m);
}

int foo(char *a, char *b, char *c, char *d, char *e, char *f) {
    int flag=1;
    int i;
    int len = strlen(e);
    if (len != strlen(f))
        flag=0;
    for (i=0; i < len; i++) {
        if (e[i] != f[i]) {
                flag = 0;
                break;
        }
    }
    return flag;
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main() {
  char buff[12];
  char chaff0[] = "IeuxMect";
  char chaff1[] = "s27lzXgT";
  char chaff2[] = "H62Pe7ky";
  char chaff3[] = "Br0MSLjX";
  char chaff4[] = "kO7wao8Q";

  chaff10[strlen(chaff10)-1] = 0;
  signal(SIGCONT, cont_handler);
  signal(SIGCHLD, chld_handler);
  signal(SIGWINCH, winch_handler);
  signal(SIGPWR, pwr_handler);
  signal(SIGINT, int_handler);


  print_msg(msg);
  printf("Enter the password: ");
  scanf("%11s", buff);

  if ( foo("TYdfExPX", "Ys1QXVxq", "uyQMBeoD", "Kr3Pp6kr", chaff10, buff)) {
	    printf("Good Job.\n");
        printflag();
  } else {
        printf("Try again.\n");
  }
  return 0;

}
