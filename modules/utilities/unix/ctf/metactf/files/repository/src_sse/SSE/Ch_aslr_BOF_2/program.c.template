#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>

void printflag();

__asm__ ("jmp %esp");
void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
    fflush(stdout);

	return;
}

void vuln(){
  int some = 1;
  char buff[AAAAAA];
  int extra = 3;
  int data = 3;
  int here = 7;

  gets(buff);
  printf("input:%s\n", buff);
  fflush(stdout);
}

int main(int argc, char* argv[]) {
  printf("This challenge has no password -- you need to exploit a weakness to access the flag\n");
  printf("\n\n");
  fflush(stdout);
  
  setregid(getegid(), getegid());

  vuln();
  return 0;
}
