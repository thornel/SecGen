#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <signal.h>
#include <sys/ptrace.h>
#include <unistd.h>
#define USERDEF AAAAAA

void printflag();

char msg[] =
 "In this level, we use a variation of the call instruction followed\n"
 "by a string.  Instead of embedding a string, we have embedded an integer.\n"
 "As we have disabled the use of debuggers, bring the binary up in a\n"
 "disassembler and redefine the appropriate bytes to discover the code that\n"
 "has been embedded.  Note that while the code may appear in hexadecimal in\n"
 "the disassembler, we are looking for its decimal value.  Note that the code\n"
 "is checked in a signal handler.  For more information on how this works,\n"
 "do a: \"man 2 signal\"\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void called();

void call() {
        __asm__("int3");
        called();
}

void called() {
        __asm__("int3");
        call();
}

void print_good(void){
	    printf("Good Job.\n");
		printflag();
}

void print_again(void){
		printf("Try again.\n");
}

void check_code(int signo) {
    int input,check,*embedded_int;
    printf("Enter the password: ");
    scanf("%d", &input);
    asm volatile ("call done; .align\n .long AAAAAA; done:  popl %0"
			: "=r" (embedded_int));
    if (input==*embedded_int)
	print_good();
    else
	print_again();
    exit(0);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main (int argc, char** argv) {
    print_msg();
    signal(SIGTRAP, check_code);
    call();
}
