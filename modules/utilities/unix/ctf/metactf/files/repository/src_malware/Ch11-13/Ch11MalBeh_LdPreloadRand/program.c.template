#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <stdlib.h>
#include <sys/ptrace.h>
#include <unistd.h>
#define MAXSIZE 4096
#define USERDEF AAAAAA
char msg[] =
 "On Linux, the environment variable LD_PRELOAD is used to specify shared\n"
 "libraries that should be pre-loaded before attempting to load other dynamic\n"
 "libraries.  Malware can use this mechanism to preload rogue versions of\n"
 "standard library calls in order to hijack the execution of these calls.\n"
 "In this level, when you guess the password incorrectly, the program uses\n"
 "calls to the rand() function to give you a hint as to what the password is.\n"
 "If you are able to hijack the rand() function and have it return 0 all of\n"
 "time, the output you will see will be the password itself.  To solve this\n"
 "level, create a shared object rand.so that implements rand() by returning\n"
 "a constant 0.  Ensure that you have gcc generate a shared, 32-bit,\n"
 "position-independent (-fPIC) object file and force the binary to preload it\n"
 "to reveal the password.  Note that, while you solve this level in many\n"
 "ways, the library hijacking method will likely be the easiet.\n\n";

static char encoding_table[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
                                'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
                                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
                                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
                                'w', 'x', 'y', 'z', '0', '1', '2', '3',
                                '4', '5', '6', '7', '8', '9', '+', '/'};

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void detectTrace(void) __attribute__((constructor));
void detectTrace (void) {
    if(ptrace(PTRACE_TRACEME, 0, 1, 0) < 0) {
        printf("Sorry, we have disallowed debuggers on this assignment.\n");
        exit(1);
    };
};

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main() {
	char input[10],output[10],mask_output[10];
        unsigned int seed=USERDEF;
	int i,flag,cnt=0;
	char modulus;

	print_msg();
	flag = 0;
	for (i=0; i < 10; i++) {
		input[i]=0;
		output[i]=0;
		mask_output[i]=0;
	}
	printf("Enter the password: ");
	scanf("%9s", input);

	/* Initialize characters */
	for (i=0; (i < MAXSIZE) && (cnt < 9); i++) {
		seed = (seed * 214013) + 2531011;
		modulus = seed % 61;
		if (!(i % 256)) {
			flag += abs(input[cnt]-encoding_table[modulus]);
			mask_output[cnt] = encoding_table[(modulus+rand())%64];
			cnt++;
		}
	}

	printf("If you got me to print three zeros in the next line, then the hint is the password\n");
	printf("%d %d %d\n",rand(),rand(),rand());
	printf("Hint: %s\n",mask_output);

	if (flag)
		printf("Try again.\n");
	else {
    	printf("Good Job.\n");
		printflag();
    }
	return 0;
}
