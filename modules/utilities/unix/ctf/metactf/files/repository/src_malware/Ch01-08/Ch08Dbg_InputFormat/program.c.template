/* Troy Routley CS 492/592 Winter 2017 */
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

#define USTR "XYZ"
#define UINT 123
#define UHEX 0xABC

char msg[] = \
"The format of a password can give a clue of what to look for to find the\n\
password. For example, if the password is a string, you might look for a\n\
call to strcmp(), while if the password is a number, you might want to look\n\
for a cmp or sub followed by a conditional jump. Find the format of the\n\
password by looking at the format string passed into scanf.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv[]) {
  char bstr[4];
  char pstr[4];
  char c;
  char x;
  int bint = 0;
  int pint;
  unsigned int bhex = 0;
  unsigned int phex;

  print_msg();

  for (x=0;x<4;x++) pstr[x] = 0;
  strncpy(pstr,USTR,strlen(USTR));
  c = pstr[0];
  pstr[0] = pstr[2];
  pstr[2] = c;
  
  pint = UINT;
  pint = pint%10*100 + (pint/10)%10*10 + (pint/100);

  phex = UHEX;
  phex = phex%0x10 * 0x100 + (phex/0x10)%0x10*0x10 + (phex/0x100);

  printf("Enter the password: ");
  scanf("%3d %3s %3x", &bint, bstr, &bhex);
  
  if (pint == bint && !strcmp(bstr,pstr) && phex == bhex) {
	printf("Good Job.\n");
    printflag();
  } else {
    printf ("Try again.\n");
  }

  return 0;
}
