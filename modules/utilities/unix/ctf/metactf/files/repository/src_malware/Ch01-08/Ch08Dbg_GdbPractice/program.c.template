#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

char pwd[] = "AAAAAA";
char msg[] =
 "Parameters in x86 are either passed to functions on the stack or in\n"
 "registers based on the calling convention.  Use your knowledge from prior\n"
 "GDB levels to to find the function call in main in which a pointer to the\n"
 "is password is passed as a function parameter.\n\n";

void pwdFunction(char* p) {
	int x = 1;
	int y = 2;
}

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv[]) {
    int i;
    char buf[20];
    print_msg();
    pwdFunction(pwd);
    printf("Enter the password: ");
    scanf("%19s",buf);
    int len = strlen(pwd);
    if (strlen(buf) != len) {
	printf("Try again.\n");
	return 0;
    }
    if (strcmp(buf, pwd) != 0) {
	printf("Try again.\n");
	return 0;
    }
	printf("Good Job.\n");
    printflag();
    return 0;
}
