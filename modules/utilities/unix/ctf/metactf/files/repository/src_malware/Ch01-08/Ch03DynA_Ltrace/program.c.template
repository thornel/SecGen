#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#define USERDEF "AAAAAA"

char msg[] =
 "In this level, you will be forced to use dynamic analysis to find the\n"
 "password.  When programs are dynamically linked, it is possible to monitor\n"
 "their calls to the libraries they depend upon such as the strcmp() calls\n"
 "to the Standard C library.  While you can solve this level in many ways try\n"
 "using \"ltrace\".\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv[]) {
    char buff[20];
    char pass[20];
    char c;
    int i;

    print_msg();

    for (i=0; i < 20; i++)
	pass[i] = 0;
    strncpy(pass,USERDEF,strlen(USERDEF));
    c = pass[0];
    pass[0] = pass[1];
    pass[1] = c;

    printf("Enter the password: ");
    scanf("%8s",buff);

    if (strcmp(buff,pass)) {
        printf ("Try again.\n");
    } else {
    	printf("Good Job.\n");
        printflag();
    }
    return 0;
}
