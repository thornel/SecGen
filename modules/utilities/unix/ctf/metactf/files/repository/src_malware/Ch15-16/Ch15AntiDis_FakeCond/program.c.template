#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <sys/ptrace.h>
#include <unistd.h>
#define USERDEF AAAAAA

void printflag();

char msg[] =
 "In this level, we have disabled the use of debuggers in order to have you\n"
 "practice the bypassing of anti-disassembly techniques.  In this binary, a\n"
 "rogue byte is inserted that confuses linear disassemblers.  By redefining\n"
 "this byte as data, one can expose the actual assembly instructions being\n"
 "executed.  Once exposed, you can find the integer that is being used as\n"
 "the password and complete the level.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

/* insert "rogue" byte 0x0F to fool dis-assembler*/

#define DISASM_MISALIGN asm volatile ( \
	"  pushl %eax       \n"        \
        "  cmpl  %eax, %eax \n"        \
        "  jz    0f         \n"        \
        "  .byte 0x0F       \n"        \
        "0:                 \n"        \
        "  popl  %eax       \n")

void print_good(void){
	    printf("Good Job.\n");
		printflag();
}

void print_again(void){
		printf("Try again.\n");
}

void detectTrace(void) __attribute__((constructor));
void detectTrace (void) {
    if(ptrace(PTRACE_TRACEME, 0, 1, 0) < 0) {
        printf("Sorry, we have disallowed debuggers on this assignment.\n");
        exit(1);
    };
};

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main (int argc, char** argv) {
    int input,check;

    print_msg();

    DISASM_MISALIGN;
    check=USERDEF;

    printf("Enter the password: ");
    scanf("%d", &input);

    if (check==input)
	print_good();
    else
	print_again();
    return 0;
}
