#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#define USERDEF "AAAAAA"
#define N (sizeof(bogus)/sizeof(const char *))
char msg[] =
 "In this level, library tracing has been made difficult so that you can learn\n"
 "to use gdb.  There are multiple strcmp() calls in main().  Two of them are\n"
 "bogus and one of them is the real check.  You will need to set breakpoints at\n"
 "each call to strcmp() in main.  To do so, load the program in gdb and do\n"
 "a \"layout split\" to obtain multiple windows.  Then type \"layout asm\" to\n"
 "get the assembly view.  Type \"focus asm\" to allow the arrow keys to scroll\n"
 "up and down and find the 3 calls to strcmp().  Set a breakpoint at the\n"
 "address of each call by typing something similar to \"break *main+150\" or\n"
 "\"break 0x4007dd\".  The key to the level is that the bogus strcmp() calls\n"
 "will be called multiple times, while the real call that checks the password\n"
 "is called only once.  So, run the program and enter the password.  Check\n"
 "which breakpoint is hit when the debugger is interrupted before continuing\n"
 "by typing \"c\".  If a breakpoint is hit more than once, delete it using the\n"
 "command \"del <breakpoint #>\".  When the program ends type \"info br\" to\n"
 "identify the breakpoint that indicates where the real strcmp() is called.\n\n"
 "Now, with real strcmp() identified, you will be examining the parameters to\n"
 "this call to discover the real password.  strcmp() is passed two pointers\n"
 "to strings.  In the calling convention of 32-bit x86, parameters are passed\n"
 "on the stack while on 64-bit x86, the first six parameters are first passed\n"
 "in registers %rdi, %rsi, %rdx, %rcx, %r8, and %r9 (Diane's Silk Dress Cost\n"
 "$89).  Based on the calling convention that applies, Run the program again\n"
 "and enter a password.  When the program breaks, examine the memory pointed\n"
 "to by the two pointers passed to the function.  To do so, use the examine\n"
 "command with the string option: \"x /s $ebp-0x34\" or \"x /s $rdi\" and\n"
 "\"x /s $rsi\" to find the password.\n\n";

const char * bogus[] = {
	"MGNmOTE4",
	"MGE3NjRh",
	"YmE4NjNh",
	"NjdiNmQ3",
	"MmYwOTE4",
	"YmMxMzFj",
	"Njc3MjY0",
	"MmNiMmRj",
	"ZTVhMzRm",
	"MGE3MDJm",
	"OTQ3MGRk",
	"YzJiZjEy",
	"NWMxMjE5",
	"OGIxOTk1",
	"YzIzM2Mz",
	"NGI0YWZk",
	"MzQ2YzU0",
	"YTIzMzRj",
	"MzUwYTk0",
	"OGE1MWI2"
};

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv[]) {
    char buff[20];
    char pass[20];
    char c;
    int i,j=0;

    print_msg();

    printf("Enter the password: ");
    scanf("%8s",buff);

    for (i=0; i < N; i++) {
           snprintf(pass,strlen(bogus[i])+1,"%s",bogus[i]);
	   if (strcmp(buff,pass)) j++;
    }

    snprintf(pass,strlen(USERDEF)+1,"%s",USERDEF);

    if (strcmp(buff,pass)) {
    	for (i=0; i < N; i++) {
           snprintf(pass,strlen(bogus[i])+1,"%s",bogus[i]);
	   if (strcmp(buff,pass)) j++;
    	}
        printf ("Try again.\n");
    } else {
    	printf("Good Job.\n");
        printflag();
    }
    return 0;
}
