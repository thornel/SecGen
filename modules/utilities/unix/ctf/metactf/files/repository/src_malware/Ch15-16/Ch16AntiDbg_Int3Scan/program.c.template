#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#define USERDEF AAAAAA
#define SCAN_LENGTH 140
#define THRESH 1000

void printflag();

char msg[] =
 "Debuggers often inject software interrupts (e.g. int 0x3 or opcode 0xcc)\n"
 "in order to implement breakpoints.  Programs can scan for these interrupts\n"
 "and modify their execution if such interrupts are found.  In this level,\n"
 "you are to find where the scan is being done and bypass the check.  Be\n"
 "careful how you bypass the check since the loop does calculate a number\n"
 "that represents the total times 0xcc has been found, but is *not* zero.\n"
 "Once the check has been skipped, you can trace the program as it modifies\n"
 "the code the user has entered.  By working backwards, you can then calculate\n"
 "the value needed to unlock the program.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

int check_password(int code) {
	unsigned char *opcode;
	int i,cnt;

	cnt = 0;

	opcode = (unsigned char*) check_password;

	for (i=0; i < SCAN_LENGTH; i++) {
		if (*(opcode+i) == 0xcc) cnt++;
	}

	if (cnt > 1) {
	  printf("Found 0xcc %d times. You must be debugging.  Bye.\n", cnt);
	  exit(0);
	} else {
	/* cnt =USERDEF; for i from 1 to 5 cnt -= THRESH; if code==cnt */
	  cnt += 4;
	  for (i=0; i < cnt; i++) code -= THRESH;

	  if (code == USERDEF) {
        	printf("Good Job.\n");
       	    printflag();
	  } else
	    printf("Try again.\n");
	}
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv)
{
	int i,x;

	print_msg();
        printf("Enter the password: ");
        scanf("%d", &x);
	check_password(x);
	return 0;
}
