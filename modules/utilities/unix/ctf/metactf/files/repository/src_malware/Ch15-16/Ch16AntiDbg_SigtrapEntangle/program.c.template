#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <fcntl.h>
#include <time.h>
#include <signal.h>
#include <sys/ptrace.h>
#define USERDEF "AAAAAA"

void printflag();

char msg[] =
 "One of the ways malware can detect if it is being debugged or traced is to\n"
 "place functionality in the SIGTRAP signal handler.  Since debuggers typically\n"
 "hijack the SIGTRAP signal (INT 3) to implement software breakpoints, analysts\n"
 "must take special care to ensure proper code execution when a program *uses*\n"
 "SIGTRAP as part of its operation.  In this level, the program has code that\n"
 "it places in the SIGTRAP handler.  The password that unlocks the binary\n"
 "within the debugger or when using ltrace is thus different than the correct\n"
 "password.  Disassemble the handler to find out what it does to the\n"
 "state.  Then, see where this state is used when checking the password.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

/* SIGTRAP trick: GDB handle SIGTRAP, if raise one under GDB, it will not reach the handler and set the integer */
int myinteger = 3;

static void sigtrap_handler(int signum){
  myinteger = 8;
}

void sigtrap(){
  signal(SIGTRAP, sigtrap_handler);
  raise(SIGTRAP);
}

void print_good(void){
     printf("Good Job.\n");
     printflag();
}

void print_again(void){
     printf("Try again.\n");
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv[])
{
  int i;
  char final[20]="";
  char input[20]="";

  print_msg();
  printf("Enter the password: ");
  scanf("%19s",input);
  sigtrap();
  strncpy(final, USERDEF, myinteger);
  if(strcmp(input, final))
	print_again();
  else
	print_good();
  return 0;
}
