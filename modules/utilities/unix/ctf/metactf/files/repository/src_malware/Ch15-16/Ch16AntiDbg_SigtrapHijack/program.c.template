#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>
#define USERDEF "AAAAAA"

void printflag();

char msg[] =
 "In this level, we have placed the entire functionality of our password check\n"
 "within the SIGTRAP handler to thwart debugging. To solve this challenge, you\n"
 "will need to understand first-chance and second-chance exception handling\n"
 "in the debugger.  Allow the program the first chance to handle the SIGTRAP\n"
 "signal so that the code you want to analyze is able to run.  Alternatively,\n"
 "if you use gdb (which does not support this kind of exception handling),\n"
 "you will need to find a way to execute the handler directly\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void called();

void call() {
        /* Original version used x86 specific trap instruction */
        /* __asm__("int3"); */
	raise(SIGTRAP);
        called();
}

void called() {
        /* Original version used x86 specific trap instruction */
        /* __asm__("int3"); */
	raise(SIGTRAP);
        call();
}

void handler(int signo) {
	int i,x;
	char pass[20], buff[9];
	for (i=0; i < 20; i++)
		pass[i] = 0;

	strncpy(pass,USERDEF,strlen(USERDEF));

	pass[8] = 0;

        printf("Enter the password: ");
        scanf("%8s", buff);

	if (strcmp(buff,pass)) 
		printf ("Try again.\n");
	else {
	    printf("Good Job.\n");
		printflag();
    }
	exit(0);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv) {
	print_msg();
	signal(SIGTRAP, handler);
	call();
}
