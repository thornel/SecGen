#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#define USERDEF0 'AAAAAA'
#define USERDEF1 'BBBBBB'
#define USERDEF2 'CCCCCC'
#define USERDEF3 'DDDDDD'
#define USERDEF4 'EEEEEE'
#define USERDEF5 'FFFFFF'
#define USERDEF6 'GGGGGG'
#define USERDEF7 'HHHHHH'

char msg[] =
 "In this level, you will need to use your knowledge of ASCII encoding to find\n"
 "the password. While you can solve this level in many ways, try using\n"
 "\"objdump -d\" or the disassembler in gdb to find the bytes of the password\n"
 "being copied.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main()
{
    char c0=USERDEF0;
    char c1=USERDEF1;
    char c2=USERDEF2;
    char c3=USERDEF3;
    char c4=USERDEF4;
    char c5=USERDEF5;
    char c6=USERDEF6;
    char c7=USERDEF7;

    char buff[9];
    int flag=0;

    print_msg();

    printf("Enter the password: ");
    scanf("%8s",buff);

    if (buff[0] != c0) flag=1;
    if (buff[1] != c1) flag=1;
    if (buff[2] != c2) flag=1;
    if (buff[3] != c3) flag=1;
    if (buff[4] != c4) flag=1;
    if (buff[5] != c5) flag=1;
    if (buff[6] != c6) flag=1;
    if (buff[7] != c7) flag=1;

    if (flag)
        printf ("Try again.\n");
    else {
    	printf("Good Job.\n");
        printflag();
    }
    return 0;
}
