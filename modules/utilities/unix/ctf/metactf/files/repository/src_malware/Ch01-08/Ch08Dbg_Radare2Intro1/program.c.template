/* Level by Avery Demay.  CS 492/592: Winter 2017 */
/* Modified by Wu-chang Feng */
#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#define USERDEF "AAAAAA"

char msg[] = \
"In this level, you will use radare2 to find the password.   To run the\n\
program using radare2's debugger, enter 'r2 -d <binary>'. Then, enter\n\
in 'aaa' to analyze the binary followed by 'V' to enter visual mode.\n\
Within visual mode, you can rotate through different views(hex, disassembly,\n\
debugger, word-hex, buffer, annotated hex) by typing 'p'. Enter 'p' twice to\n\
to get to the debugger view.  Then issue the command to navigate to main by\n\
typing ':s sym.main'.  (All debugger commands are preceded by ':' in visual\n\
mode).  Using the arrow keys, find where sym.imp.strcmp is called. Set a\n\
breakpoint at the call using ':db <address>'. To run the program to this\n\
breakpoint, type ':dc' for debug continue.  Within the debugger view, you can\n\
see the current location in the stack (at the top) and the current values of\n\
the registers underneath. In looking at the stack, find the two parameters\n\
that have been pushed as arguments.  One of them is the password.  Another\n\
way to solve this is to examine the parameters to the strcmp.  In the\n\
preceding lines, [ebp-0x34] and [ebp-0x20] are pushed as parameters.  To see\n\
the strings these point to, use commands ':ps @ ebp-0x20' (print string that\n\
the pointer stored at ebp-0x20 points to) and ':ps @ ebp-0x34'.\n";

void print_msg() {
        printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv[]) {
    char buff[20];
    char pass[20];
    char tmp;
    int i;

    print_msg();

    printf("Enter the password: ");
    scanf("%8s",buff);

    for (i=0; i < 20; i++)
	pass[i] = 0;
    strncpy(pass,USERDEF,strlen(USERDEF));
    tmp = pass[1];
    pass[1] = pass[5];
    pass[5] = tmp;

    if(strcmp(buff,pass) == 0) {
    	printf("Good Job.\n");
	    printflag();
    } else
        printf("Try again.\n");


    return 0;
}
