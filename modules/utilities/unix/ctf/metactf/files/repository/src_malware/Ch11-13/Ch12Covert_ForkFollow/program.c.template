#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#define USERDEF0 AAAAAA
#define USERDEF1 BBBBBB

char msg[] =
 "To escape analysis, code can be run in another process than the original.\n"
 "In this level, you will need to determine the passcode (in decimal) that\n"
 "will unlock the binary by analyzing the binary using \"objdump -d\" or\n"
 "\"gdb\".  To trace execution into the child, employ gdb's follow-fork-mode.\n"
 "Good luck! \n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

pid_t pid;

int main() {
    int child_status,guess,answer,u0,u1;

    print_msg();

    pid = fork();

    if (pid == 0) {
        printf("Enter your password: ");
        scanf("%d",&guess);

	u0 = USERDEF0;
	u1 = USERDEF1;

	answer = ((u0 >> 16) ^ u1) & 0xff;
	answer = (answer << 8) | (((u0 >> 8) ^ (u1 >> 8)) & 0xff);
	answer = (answer << 8) | ((u0 ^ (u1 >> 16)) & 0xff);

	if (guess==answer) {
    	    printf("Good Job.\n");
        	printflag();
	} else
        	printf("Try again.\n");
        exit(0);
      }
   else {
        wait(&child_status);
        exit(child_status);
   }
}
