#include <stdio.h>
#include <fcntl.h>
#include <string.h>
#include <sys/prctl.h>
#include <unistd.h>
#define USERDEF "AAAAAA"

char msg[] =
 "In this level, the binary has been packed with a common packer, but\n"
 "then modified so that the original packer will no longer unpack it.\n"
 "We have, however, given you the original binary for you to look at,\n"
 "but with the password removed.  Examine this binary to familiarize\n"
 "yourself with the password code and its orginal location.  Then,\n"
 "run the packed version and attach to it via gdb after the password\n"
 "prompt.  Trace through the execution until you get to the password\n"
 "checking code which will reveal the password.\n\n";

/* Symbolic execution trap */
void print_msg() {
  unsigned int i,h1,h2;
  unsigned int len=strlen(msg);
  for (i = 0; i < 100*len; i++) {
    h1 += msg[i%len] + msg[(i+1)%len];
    h2 += msg[(i+1)%len] + msg[(i+2)%len];
  }
  if (h1 == h2)
    printf("%s",msg);
  else
    printf("%s",msg);
}

void printflag()
{
	int fd;
	int len;
	unsigned char data[128];

	fd = open("flag", O_RDONLY);

	if ( fd <= 0 ) {
		printf("Failed to open flag.\n");
		return;
	}

	len = lseek( fd, 0, SEEK_END);
	lseek(fd, 0, SEEK_SET);

	if ( len > 128 ) {
		len = 128;
	}

	memset(data, 0, 128);
	read( fd, data, len);
	close(fd);

	printf("%s\n", data);
	return;
}

int main(int argc, char* argv[]) {
    char buff[20];
    char pass[20];
    char c;
    int i;

    prctl( PR_SET_PTRACER, PR_SET_PTRACER_ANY, 0, 0, 0 );
    print_msg();

    for (i=0; i < 20; i++)
	pass[i] = 0;
    strncpy(pass,USERDEF,strlen(USERDEF));
    c = pass[0];
    pass[0] = pass[1];
    pass[1] = c;

    printf("Enter the password: ");
    scanf("%8s",buff);

    if (strcmp(buff,pass)) {
        printf ("Try again.\n");
    } else {
	    printf("Good Job.\n");
        printflag();
    }
    return 0;
}
