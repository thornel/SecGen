require 'test/unit'
require 'mocha/test_unit'
require './modules/generators/vulnerabilities/secgen_local/local'
require './modules/generators/vulnerabilities/secgen_local/vulnerabilities_helper'

class Vulnerability_Generator_Tests < Test::Unit::TestCase

  def test_generator_should_return_vulnerabilities
    #ARRANGE
    v1 = Vulnerability.new('v1', '10', 'char input[1000];gets(input);', 'char input[15];scanf("%s", input);printf("Cat Flag");', 'printf("Cat Flag");')
    v2 = Vulnerability.new('v2', '10', '', 'void secretFunction(){printf("This is a secret funtion!\n");printf("Dog Flag");}', 'printf("Dog Flag");')

    vulnerabilities = Array[v1, v2]

    helper = VulnerabilitiesHelper.new
    helper.expects(:get_vulnerabilities).returns(vulnerabilities)
    helper.expects(:get_available_vulnerabilities).returns(vulnerabilities).at_least_once
    helper.expects(:randomly_select_vulnerability).returns(v1, v2).at_least_once

    generator = VulnerabilitiesGenerator.new
    generator.helper = helper
    generator.max_score = '20'

    #ACT
    result = generator.generate

    #ASSERT
    arr = {
        v1.id => v1.insecure_code,
        v2.id => v2.insecure_code
    }

    assert_equal(arr.to_json(), result[0])
  end

  def test_generator_should_return_single_vulnerability
    #ARRANGE
    v1 = Vulnerability.new('v1', '10', 'char input[1000];gets(input);', 'char input[15];scanf("%s", input);printf("Cat Flag");', 'printf("Cat Flag");')
    v2 = Vulnerability.new('v2', '10', '', 'void secretFunction(){printf("This is a secret funtion!\n");printf("Dog Flag");}', 'printf("Dog Flag");')

    vulnerabilities = Array[v1, v2]

    helper = VulnerabilitiesHelper.new
    helper.expects(:get_vulnerabilities).returns(vulnerabilities)
    helper.expects(:get_available_vulnerabilities).returns(vulnerabilities).at_least_once
    helper.expects(:randomly_select_vulnerability).returns(v1).at_least_once

    generator = VulnerabilitiesGenerator.new
    generator.helper = helper
    generator.max_score = '10'

    #ACT
    result = generator.generate

    #ASSERT
    arr = {
        v1.id => v1.insecure_code,
        v2.id => v2.secure_code
    }

    assert_equal(arr.to_json(), result[0])
  end

  def test_generator_should_return_no_vulnerabilities
    #ARRANGE
    v1 = Vulnerability.new('v1', '10', 'char input[1000];gets(input);', 'char input[15];scanf("%s", input);printf("Cat Flag");', 'printf("Cat Flag");')
    v2 = Vulnerability.new('v2', '10', '', 'void secretFunction(){printf("This is a secret funtion!\n");printf("Dog Flag");}', 'printf("Dog Flag");')

    vulnerabilities = Array[v1, v2]

    helper = VulnerabilitiesHelper.new
    helper.expects(:get_vulnerabilities).returns(vulnerabilities)

    generator = VulnerabilitiesGenerator.new
    generator.helper = helper
    generator.max_score = '0'

    #ACT
    result = generator.generate

    #ASSERT
    arr = {
        v1.id => v1.secure_code,
        v2.id => v2.secure_code
    }

    assert_equal(arr.to_json(), result[0])
  end
end

