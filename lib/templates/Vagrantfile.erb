# -*- mode: ruby -*-
# vi: set ft=ruby :

# This file was generated by SecGen
# <%= @time %>
# Based on <%= @scenario %>

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
<% @systems.each do |system| %>
  config.vm.define "<%= system.name %>" do |<%= system.name %>|
    config.vm.provider :virtualbox do |vb|
      vb.gui = true
    end

    # SecGen modules
<% system.module_selections.each do |selected_module| -%>

<%= selected_module.to_s_comment -%>
<%   case selected_module.module_type
     when 'base' -%>
    <%= system.name %>.vm.box = "<%= selected_module.module_path_name %>"
    <%= system.name %>.vm.box_url = "<%= selected_module.attributes['url'][0] %>"
<%   when 'network' -%>
<%     if selected_module.attributes['range'][0].nil? || selected_module.attributes['range'][0] == "dhcp" -%>
    <%= system.name %>.vm.network :<%= selected_module.attributes['type'][0] %>, type: "dhcp"
<%     else -%>
    <%= system.name %>.vm.network :<%= selected_module.attributes['type'][0] %>, ip: "<%= selected_module.attributes['range'][0] %>"
<%     end -%>
<%   when 'vulnerability', 'service', 'utility', 'encoder', 'generator' -%>
<%     module_name = selected_module.module_path_name -%>
    <%= system.name %>.vm.provision "puppet" do | <%=module_name%> |
<%     # if there are facter variables to define
      if selected_module.received_inputs != {} -%>
      <%=module_name%>.facter = {
<%         selected_module.received_inputs.each do |key, value| -%>
         "<%=key%>" => "<%=value%>",
<%         end -%>
      }
<%    end -%>
      <%=module_name%>.module_path = "<%="puppet/#{system.name}/modules"%>"
      <%=module_name%>.environment_path = "<%="#{ENVIRONMENTS_PATH}"%>"
      <%=module_name%>.environment = "production"
      <%=module_name%>.manifests_path = "<%="#{ROOT_DIR}/#{selected_module.module_path}/"%>"
      <%=module_name%>.manifest_file = "<%="#{selected_module.module_path_end}.pp"%>"
    end
<%   end -%>
<% end -%>

    #TODO: fixme!
#    # clean up script which clears history from the VMs and clobs files together
#    <%= system.name %>.vm.provision "puppet" do |cleanup|
#      cleanup.module_path = "<%="#{ROOT_DIR}/mount/puppet/module"%>"
#      cleanup.environment_path = "<%="#{ENVIRONMENTS_PATH}"%>"
#      cleanup.environment = "production"
#      cleanup.manifests_path = "<%="#{ROOT_DIR}/mount/puppet/manifest"%>"
#      cleanup.manifest_file = "cleanup.pp"
#    end
    <%= system.name %>.vm.provision :shell, :inline => "history -c && history -w"
#    <%= system.name %>.vm.provision :shell, :inline => "umount /mount/"
  end
<% end %>
end
