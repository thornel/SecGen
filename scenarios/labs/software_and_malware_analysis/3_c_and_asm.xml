<?xml version="1.0"?>

<scenario xmlns="http://www.github/cliffe/SecGen/scenario"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.github/cliffe/SecGen/scenario">

	<name>C and Assembly lab</name>
	<author>Thalita Vergilio</author>
  <description>A MetaCTF lab. In your home directory you will find some binaries that you need to reverse engineer in order to determine the password that the program expects. Once you determing the password, run the program and enter the password to receive the file.

  This week, we will finish our crash course in C programming by looking at structs, a data type used to represent composite data, memory management, one of the biggest strengths of the C language, and bitwise operators, which you will find particularly helpful when looking at disassembled code. We will then change our focus to assembly language. Starting with some basics, we will familiarise ourselves with the syntax and organisation of decompiled code before moving onto recognising the structures we learned last week in the assembly code.

	[Lab sheet here](https://docs.google.com/document/d/14bEEdrJb0hGS5sBR-mOTWzCY-ws1LFDza3sIM04Akvg/edit?usp=sharing).
	</description>

  <type>ctf-lab</type>
  <type>lab-sheet</type>
  <difficulty>intermediate</difficulty>

	<CyBOK KA="MAT" topic="Malware Analysis">
		<keyword>analysis techniques</keyword>
		<keyword>analysis environments</keyword>
	</CyBOK>
	<CyBOK KA="MAT" topic="Technical Underpinning">
		<keyword>Technical underpinnings for malware analysis: C</keyword>
		<keyword>Technical underpinnings for malware analysis: ASM</keyword>
	</CyBOK>

	<video>
		<title>From C to Assembly Language</title>
		<by>Thalita Vergilio</by>
		<url>https://youtu.be/_R9nLhtJJHY</url>
		<type>lecture-prerecorded</type>
		<CyBOK KA="MAT" topic="Technical Underpinning">
			<keyword>Technical underpinnings for malware analysis: ASM</keyword>
			<keyword>Technical underpinnings for malware analysis: C</keyword>
		</CyBOK>
	</video>

  <system>
    <system_name>metactf</system_name>
    <base platform="linux" type="desktop" distro="Buster"/>

    <utility module_path=".*/reversing_tools"/>

    <utility module_path=".*/parameterised_accounts">
      <input into="accounts" into_datastore="account">
        <generator type="account">
					<input into="username">
						<generator type="random_sanitised_word">
							<input into="wordlist">
								<value>mythical_creatures</value>
							</input>
						</generator>
					</input>
					<input into="password">
						<value>tiaspbiqe2r</value>
					</input>
					<input into="super_user">
						<value>false</value>
					</input>
        </generator>
      </input>
    </utility>


		<utility module_path=".*/kde_minimal">
			<input into="autologin_user">
				<datastore access="0" access_json="['username']">account</datastore>
			</input>
			<input into="accounts">
				<datastore>account</datastore>
			</input>
			<input into="autostart_konsole">
				<value>true</value>
			</input>
		</utility>
		<utility module_path=".*/handy_cli_tools"/>
		<utility module_path=".*/hash_tools"/>

    <utility module_path=".*/metactf">
      <input into="challenge_list">
				<generator type="metactf_challenge">
          <input into="challenge_path">
            <value>src_csp/Ch1-2/Ch2_03_IntOverflow</value>
          </input>
        </generator>
        <generator type="metactf_challenge">
          <input into="challenge_path">
            <value>src_csp/Ch1-2/Ch2_03_TwosComplement</value>
          </input>
        </generator>
        <generator type="metactf_challenge">
          <input into="challenge_path">
            <value>src_csp/Ch1-2/Ch2_03_XorInt</value>
          </input>
        </generator>
				<generator type="metactf_challenge">
					<input into="challenge_path">
						<value>src_malware/Ch01-08/Ch04x86_AsciiInstr</value>
					</input>
				</generator>
				<generator type="metactf_challenge">
          <input into="challenge_path">
            <value>src_malware/Ch01-08/Ch04x86_AsciiStrcmp</value>
          </input>
        </generator>
				<generator type="metactf_challenge">
          <input into="challenge_path">
            <value>src_csp/Ch1-2/Ch2_01_Endian</value>
          </input>
        </generator>

      </input>
      <input into="account">
        <datastore>account</datastore>
      </input>
    </utility>

    <network type="private_network" range="dhcp"/>
  </system>

</scenario>
