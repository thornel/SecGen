<?xml version="1.0"?>

<scenario xmlns="http://www.github/cliffe/SecGen/scenario"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.github/cliffe/SecGen/scenario">

	<name>Recognising C Code Constructs in Assembly lab</name>
	<author>Thalita Vergilio</author>
  <description>A MetaCTF lab. In your home directory you will find some binaries that you need to reverse engineer in order to determine the password that the program expects. Once you determing the password, run the program and enter the password to receive the file.

	We start with understanding how branching and conditionals are represented in assembly. We then move onto learning how to identify the common C code constructs we saw in previous weeks in disassembled code, namely loops, function calls, switch statements, arrays and structs.

	[Lab sheet here](https://docs.google.com/document/d/1l4tU49JhI65Q85Zv9I1Wm1kaHNENp6iyIwMUhM8j_14/edit?usp=sharing).
	</description>

  <type>ctf-lab</type>
  <type>lab-sheet</type>
  <difficulty>intermediate</difficulty>

	<CyBOK KA="MAT" topic="Malware Analysis">
		<keyword>analysis techniques</keyword>
		<keyword>analysis environments</keyword>
		<keyword>STATIC ANALYSIS</keyword>
	</CyBOK>

	<video>
		<title>Recognising C Constructs in Assembly</title>
		<by>Thalita Vergilio</by>
		<url>https://youtu.be/wiaxGbPoxZ4</url>
		<type>lecture-prerecorded</type>
		<CyBOK KA="MAT" topic="Malware Analysis">
			<keyword>analysis techniques</keyword>
		</CyBOK>
	</video>

  <system>
    <system_name>metactf</system_name>
    <base platform="linux" type="desktop" distro="Buster"/>

    <utility module_path=".*/reversing_tools"/>

    <utility module_path=".*/parameterised_accounts">
      <input into="accounts" into_datastore="account">
        <generator type="account">
					<input into="username">
						<generator type="random_sanitised_word">
							<input into="wordlist">
								<value>mythical_creatures</value>
							</input>
						</generator>
					</input>
					<input into="password">
						<value>tiaspbiqe2r</value>
					</input>
					<input into="super_user">
						<value>false</value>
					</input>
        </generator>
      </input>
    </utility>


		<utility module_path=".*/kde_minimal">
			<input into="autologin_user">
				<datastore access="0" access_json="['username']">account</datastore>
			</input>
			<input into="accounts">
				<datastore>account</datastore>
			</input>
			<input into="autostart_konsole">
				<value>true</value>
			</input>
		</utility>
		<utility module_path=".*/handy_cli_tools"/>
		<utility module_path=".*/hash_tools"/>

    <utility module_path=".*/metactf">
      <input into="challenge_list">
				<generator type="metactf_challenge">
          <input into="challenge_path">
						<value>src_csp/Ch3.6-3.7/Ch3_06_LoopMulti</value>
          </input>
        </generator>
        <generator type="metactf_challenge">
          <input into="challenge_path">
						<value>src_malware/Ch01-08/Ch06CAsm_SwitchTable</value>
          </input>
        </generator>
      </input>
      <input into="account">
        <datastore>account</datastore>
      </input>
    </utility>

    <network type="private_network" range="dhcp"/>
  </system>

</scenario>
